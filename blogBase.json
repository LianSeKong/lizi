{"singlePage": ["about"], "startSite": "", "filingNum": "", "onePageListNum": 15, "commentLabelColor": "#006b75", "yearColorList": ["#bc4c00", "#0969da", "#1f883d", "#A333D0"], "i18n": "CN", "themeMode": "manual", "dayTheme": "light", "nightTheme": "dark", "urlMode": "pinyin", "script": "", "style": "", "head": "", "indexScript": "", "indexStyle": "", "bottomText": "\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904", "showPostSource": 1, "iconList": {}, "UTC": 8, "rssSplit": "sentence", "exlink": {}, "needComment": 1, "allHead": "", "title": "Lizi", "subTitle": "\u5373\u662f\u4ee3\u7801\u4e5f\u662f\u751f\u6d3b\uff01", "avatarUrl": "https://img.icons8.com/doodle/480/mugman.png", "GMEEK_VERSION": "last", "postListJson": {"P1": {"htmlDir": "docs/post/Shell Lab.html", "labels": ["csapp", "cmu15-213", "lab"], "postTitle": "Shell Lab", "postUrl": "post/Shell%20Lab.html", "postSourceUrl": "https://github.com/LianSeKong/lizi/issues/1", "commentNum": 0, "wordCount": 11, "description": "# Shell Lab\u3002", "top": 0, "createdAt": 1721200658, "style": "", "script": "", "head": "", "ogImage": "https://img.icons8.com/doodle/480/mugman.png", "createdDate": "2024-07-17", "dateLabelColor": "#bc4c00"}, "P2": {"htmlDir": "docs/post/cs61a-su24-hw01.html", "labels": ["cs61a", "hw"], "postTitle": "cs61a-su24-hw01", "postUrl": "post/cs61a-su24-hw01.html", "postSourceUrl": "https://github.com/LianSeKong/lizi/issues/2", "commentNum": 0, "wordCount": 9590, "description": "---\r\nurl: https://cs61a.org/hw/hw01/\r\ntitle: Homework 1 \r\ndate: 2024-07-17 16:08:34\r\ntag: \r\nbanner: 'https://images.unsplash.com/photo-1719749937847-ab76d3e0dbb7?crop=entropy&cs=srgb&fm=jpg&ixid=M3w0Njc1ODd8MHwxfHJhbmRvbXx8fHx8fHwxfHwxNzIxMjAzNjE1fA&ixlib=rb-4.0.3&q=85&fit=crop&w=624&max-h=540'\r\nbanner_icon: \ud83d\udd16\r\n---\r\nsr-annote { all: unset; }\r\n\r\n_Due by 11:59pm on Wednesday, June 26  \r\n\u622a\u6b62\u65e5\u671f\u4e3a 6 \u6708 26 \u65e5\u661f\u671f\u4e09\u665a\u4e0a 11\uff1a59_\r\n\r\n## Instructions \u6307\u793a\r\n\r\nDownload [hw01.zip](https://cs61a.org/hw/hw01/hw01.zip). \u4e0b\u8f7dhw01.zip\u3002", "top": 0, "createdAt": 1721205134, "style": "", "script": "", "head": "", "ogImage": "https://img.icons8.com/doodle/480/mugman.png", "createdDate": "2024-07-17", "dateLabelColor": "#bc4c00"}, "P3": {"htmlDir": "docs/post/cs61a-su24-hw02.html", "labels": ["cs61a", "hw"], "postTitle": "cs61a-su24-hw02", "postUrl": "post/cs61a-su24-hw02.html", "postSourceUrl": "https://github.com/LianSeKong/lizi/issues/3", "commentNum": 0, "wordCount": 14725, "description": "## Instructions\r\n\r\nDownload [hw02.zip](https://cs61a.org/hw/hw02/hw02.zip). Inside the archive, you will find a file called [hw02.py](https://cs61a.org/hw/hw02/hw02.py), along with a copy of the `ok` autograder.\r\n\r\n**Submission:** When you are done, submit the assignment by uploading all code files you've edited to Gradescope. You may submit more than once before the deadline; only the final submission will be scored. Check that you have successfully submitted your code on Gradescope. See [Lab 0](https://cs61a.org/lab/lab00#task-c-submitting-the-assignment) for more instructions on submitting assignments.\r\n\r\n**Using Ok:** If you have any questions about using Ok, please refer to [this guide.](https://cs61a.org/articles/using-ok)\r\n\r\n**Readings:** You might find the following references useful:\r\n\r\n*   [Section 1.6](https://www.composingprograms.com/pages/16-higher-order-functions.html)\r\n*   [Section 1.7](https://www.composingprograms.com/pages/17-recursive-functions.html)\r\n\r\n**Grading:** Homework is graded based on correctness. Each incorrect problem will decrease the total score by one point. **This homework is out of 2 points.**\r\n\r\nSeveral doctests refer to these functions:\r\n\r\n```\r\nfrom operator import add, mul\r\n\r\nsquare = lambda x: x * x\r\n\r\nidentity = lambda x: x\r\n\r\ntriple = lambda x: 3 * x\r\n\r\nincrement = lambda x: x + 1\r\n\r\n```\r\n\r\n## Higher-Order Functions\r\n\r\n### Q1: Product\r\n\r\nWrite a function called `product` that returns the product of the first `n` terms of a sequence. Specifically, `product` takes in an integer `n` and `term`, a single-argument function that determines a sequence. (That is, `term(i)` gives the `i`th term of the sequence.) `product(n, term)` should return `term(1) * ... * term(n)`.\r\n\r\n```\r\ndef product(n, term):\r\n    '''Return the product of the first n terms in a sequence.\r\n\r\n    n: a positive integer\r\n    term:  a function that takes one argument to produce the term\r\n\r\n    >>> product(3, identity)  # 1 * 2 * 3\r\n    6\r\n    >>> product(5, identity)  # 1 * 2 * 3 * 4 * 5\r\n    120\r\n    >>> product(3, square)    # 1^2 * 2^2 * 3^2\r\n    36\r\n    >>> product(5, square)    # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\r\n    14400\r\n    >>> product(3, increment) # (1+1) * (2+1) * (3+1)\r\n    24\r\n    >>> product(3, triple)    # 1*3 * 2*3 * 3*3\r\n    162\r\n    '''\r\n    '*** YOUR CODE HERE ***'\r\n\r\n\r\n```\r\n\r\nUse Ok to test your code:\r\n\r\n```\r\npython3 ok -q product\r\n\r\n```\r\n\r\n:bear: <u>\u6bd4\u8f83\u7b80\u5355\uff0c\u5c31\u4e0d\u89e3\u91ca\u4e86</u>\r\n\r\n```python\r\ndef product(n, term):\r\n    i, count = 1, 1\r\n    while i <= n:\r\n        count, i = mul(count, term(i)), add(i, 1)\r\n    return count\r\n```\r\n\r\n### Q2: Accumulate\r\n\r\nLet's take a look at how `product` is an instance of a more general function called `accumulate`, which we would like to implement:\r\n\r\n```\r\ndef accumulate(fuse, start, n, term):\r\n    '''Return the result of fusing together the first n terms in a sequence \r\n    and start.  The terms to be fused are term(1), term(2), ..., term(n). \r\n    The function fuse is a two-argument commutative & associative function.\r\n\r\n    >>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\r\n    15\r\n    >>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\r\n    26\r\n    >>> accumulate(add, 11, 0, identity) # 11 (fuse is never used)\r\n    11\r\n    >>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2\r\n    25\r\n    >>> accumulate(mul, 2, 3, square)    # 2 * 1^2 * 2^2 * 3^2\r\n    72\r\n    >>> # 2 + (1^2 + 1) + (2^2 + 1) + (3^2 + 1)\r\n    >>> accumulate(lambda x, y: x + y + 1, 2, 3, square)\r\n    19\r\n    '''\r\n    '*** YOUR CODE HERE ***'\r\n\r\n\r\n```\r\n\r\n`accumulate` has the following parameters:\r\n\r\n*   `fuse`: a two-argument function that specifies how the current term is fused with the previously accumulated terms\r\n*   `start`: value at which to start the accumulation\r\n*   `n`: a non-negative integer indicating the number of terms to fuse\r\n*   `term`: a single-argument function; `term(i)` is the `i`th term of the sequence\r\n\r\nImplement `accumulate`, which fuses the first `n` terms of the sequence defined by `term` with the `start` value using the `fuse` function.\r\n\r\nFor example, the result of `accumulate(add, 11, 3, square)` is\r\n\r\n```\r\nadd(11,  add(square(1), add(square(2),  square(3)))) =\r\n    11 +     square(1) +    square(2) + square(3)    =\r\n    11 +     1         +    4         + 9            = 25\r\n\r\n```\r\n\r\nAssume that `fuse` is commutative, `fuse(a, b) == fuse(b, a)`, and associative, `fuse(fuse(a, b), c) == fuse(a, fuse(b, c))`.\r\n\r\nThen, implement `summation` (from lecture) and `product` as one-line calls to `accumulate`.\r\n\r\n**Important:** Both `summation_using_accumulate` and `product_using_accumulate` should be implemented with a single line of code starting with `return`.\r\n\r\n```\r\ndef summation_using_accumulate(n, term):\r\n    '''Returns the sum: term(1) + ... + term(n), using accumulate.\r\n\r\n    >>> summation_using_accumulate(5, square) # square(0) + square(1) + ... + square(4) + square(5)\r\n    55\r\n    >>> summation_using_accumulate(5, triple) # triple(0) + triple(1) + ... + triple(4) + triple(5)\r\n    45\r\n    >>> # This test checks that the body of the function is just a return statement.\r\n    >>> import inspect, ast\r\n    >>> [type(x).__name__ for x in ast.parse(inspect.getsource(summation_using_accumulate)).body[0].body]\r\n    ['Expr', 'Return']\r\n    '''\r\n    return ____\r\n\r\ndef product_using_accumulate(n, term):\r\n    '''Returns the product: term(1) * ... * term(n), using accumulate.\r\n\r\n    >>> product_using_accumulate(4, square) # square(1) * square(2) * square(3) * square()\r\n    576\r\n    >>> product_using_accumulate(6, triple) # triple(1) * triple(2) * ... * triple(5) * triple(6)\r\n    524880\r\n    >>> # This test checks that the body of the function is just a return statement.\r\n    >>> import inspect, ast\r\n    >>> [type(x).__name__ for x in ast.parse(inspect.getsource(product_using_accumulate)).body[0].body]\r\n    ['Expr', 'Return']\r\n    '''\r\n    return ____\r\n\r\n\r\n```\r\n\r\nUse Ok to test your code:\r\n\r\n```\r\npython3 ok -q accumulate\r\npython3 ok -q summation_using_accumulate\r\npython3 ok -q product_using_accumulate\r\n\r\n```\r\n\r\n:bear: `accumulate\uff1a \u5bf9product\u7684\u6bcf\u6b21\u76f8\u4e58\u884c\u4e3a\u66ff\u6362\u4e3a\u62bd\u8c61\u7684\u51fd\u6570`\r\n\r\n```python\r\ndef accumulate(fuse, start, n, term):\r\n    i, count = 1, start\r\n    while i <= n:\r\n        start, i = merger(fuse, term(i)), add(i + 1)\r\n    return count\r\n```\r\n\r\n:bear: `summation_using_accumulate: product\u7684\u53d8\u4f53`\r\n\r\n```python\r\ndef summation_using_accumulate(n, term):\r\n    return accumulate(add, term(0), n, term)\r\n```\r\n\r\n:bear: `sproduct_using_accumulate: product\u7684\u53d8\u4f53`\r\n\r\n```python\r\ndef product_using_accumulate(n, term):\r\n \treturn accumulate(mul, 1, n, term)\r\n```\r\n\r\n\r\n\r\n### Q3: Make Repeater\r\n\r\nImplement the function `make_repeater` which takes a one-argument function `f` and a positive integer `n`. It returns a one-argument function, where `make_repeater(f, n)(x)` returns the value of `f(f(...f(x)...))` in which `f` is applied `n` times to `x`. For example, `make_repeater(square, 3)(5)` squares 5 three times and returns 390625, just like `square(square(square(5)))`.\r\n\r\n```\r\ndef make_repeater(f, n):\r\n    '''Returns the function that computes the nth application of f.\r\n\r\n    >>> add_three = make_repeater(increment, 3)\r\n    >>> add_three(5)\r\n    8\r\n    >>> make_repeater(triple, 5)(1) # 3 * (3 * (3 * (3 * (3 * 1))))\r\n    243\r\n    >>> make_repeater(square, 2)(5) # square(square(5))\r\n    625\r\n    >>> make_repeater(square, 3)(5) # square(square(square(5)))\r\n    390625\r\n    '''\r\n    '*** YOUR CODE HERE ***'\r\n\r\n\r\n```\r\n\r\nUse Ok to test your code:\r\n\r\n```\r\npython3 ok -q make_repeater\r\n\r\n```\r\n\r\n:bear:  \r\n\r\n```python\r\ndef make_repeater(f, n):\r\n    def helper(x):\r\n        i = n;\r\n        while i:\r\n            x = f(x)\r\n            i = i - 1;\r\n        return x\r\n    return helper\r\n```\r\n\r\n\r\n\r\n## Recursion\r\n\r\n### Q4: Digit Distance\r\n\r\nFor a given integer, the _digit distance_ is the sum of the absolute differences between consecutive digits. For example:\r\n\r\n*   The digit distance of `6` is `0`.\r\n*   The digit distance of `61` is `5`, as the absolute value of `6 - 1` is `5`.\r\n*   The digit distance of `71253` is `12` (`6 + 1 + 3 + 2`).\r\n\r\nWrite a function that determines the digit distance of a given positive integer. You must use recursion or the tests will fail.\r\n\r\n**Hint:** There are multiple valid ways of solving this problem! If you're stuck, try writing out an iterative solution first, and then convert your iterative solution into a recursive one.\r\n\r\n```\r\ndef digit_distance(n):\r\n    '''Determines the digit distance of n.\r\n\r\n    >>> digit_distance(3)\r\n    0\r\n    >>> digit_distance(777)\r\n    0\r\n    >>> digit_distance(314)\r\n    5\r\n    >>> digit_distance(31415926535)\r\n    32\r\n    >>> digit_distance(3464660003)\r\n    16\r\n    >>> from construct_check import check\r\n    >>> # ban all loops\r\n    >>> check(HW_SOURCE_FILE, 'digit_distance',\r\n    ...       ['For', 'While'])\r\n    True\r\n    '''\r\n    '*** YOUR CODE HERE ***'\r\n\r\n\r\n```\r\n\r\nUse Ok to test your code:\r\n\r\n```\r\npython3 ok -q digit_distance\r\n\r\n```\r\n\r\n:bear:\r\n\r\n```python\r\ndef digit_distance(n):\r\n    if n < 10:\r\n        return 0\r\n    else:\r\n        return abs(sub(n % 10, n // 10 % 10)) + digit_distance(n // 10)\r\n```\r\n\r\n\r\n\r\n### Q5: Interleaved Sum\r\n\r\nWrite a function `interleaved_sum`, which takes in a number `n` and two one-argument functions: `odd_func` and `even_func`. It applies `odd_func` to every odd number and `even_func` to every even number from 1 to `n` _inclusive_ and returns the sum.\r\n\r\nFor example, executing `interleaved_sum(5, lambda x: x, lambda x: x * x)` returns `1 + 2*2 + 3 + 4*4 + 5 = 29`.\r\n\r\n**Important:** Implement this function without using any loops or directly testing if a number is odd or even -- aka modulos (`%`) are not allowed! Instead of directly checking whether a number is even or odd, start with 1, which you know is an odd number.\r\n\r\n**Hint:** Introduce an inner helper function that takes an odd number `k` and computes an interleaved sum from `k` to `n` (including `n`).\r\n\r\n```\r\ndef interleaved_sum(n, odd_func, even_func):\r\n    '''Compute the sum odd_func(1) + even_func(2) + odd_func(3) + ..., up\r\n    to n.\r\n\r\n    >>> identity = lambda x: x\r\n    >>> square = lambda x: x * x\r\n    >>> triple = lambda x: x * 3\r\n    >>> interleaved_sum(5, identity, square) # 1   + 2*2 + 3   + 4*4 + 5\r\n    29\r\n    >>> interleaved_sum(5, square, identity) # 1*1 + 2   + 3*3 + 4   + 5*5\r\n    41\r\n    >>> interleaved_sum(4, triple, square)   # 1*3 + 2*2 + 3*3 + 4*4\r\n    32\r\n    >>> interleaved_sum(4, square, triple)   # 1*1 + 2*3 + 3*3 + 4*3\r\n    28\r\n    >>> from construct_check import check\r\n    >>> check(HW_SOURCE_FILE, 'interleaved_sum', ['While', 'For', 'Mod']) # ban loops and %\r\n    True\r\n    >>> check(HW_SOURCE_FILE, 'interleaved_sum', ['BitAnd', 'BitOr', 'BitXor']) # ban bitwise operators, don't worry about these if you don't know what they are\r\n    True\r\n    '''\r\n    '*** YOUR CODE HERE ***'\r\n\r\n\r\n```\r\n\r\nUse Ok to test your code:\r\n\r\n```\r\npython3 ok -q interleaved_sum\r\n\r\n```\r\n\r\n:bear:`interleaved_sum`\r\n\r\n```python\r\ndef interleaved_sum(n, odd_func, even_func):\r\n    if n == 0:\r\n        return 0\r\n    elif n % 2 == 1:\r\n        return odd_func(n) + interleaved_sum(n - 1, odd_func, even_func)\r\n    else:\r\n        return even_func(n) + interleaved_sum(n - 1, odd_func, even_func)\r\n\r\n```\r\n\r\n\r\n\r\n### Q6: Count Coins\r\n\r\nGiven a positive integer `total`, a set of coins makes change for `total` if the sum of the values of the coins is `total`. Here we will use standard US Coin values: 1, 5, 10, 25. For example, the following sets make change for `15`:\r\n\r\n*   15 1-cent coins\r\n*   10 1-cent, 1 5-cent coins\r\n*   5 1-cent, 2 5-cent coins\r\n*   5 1-cent, 1 10-cent coins\r\n*   3 5-cent coins\r\n*   1 5-cent, 1 10-cent coin\r\n\r\nThus, there are 6 ways to make change for `15`. Write a **recursive** function `count_coins` that takes a positive integer `total` and returns the number of ways to make change for `total` using coins.\r\n\r\nYou can use _either_ of the functions given to you:\r\n\r\n*   `next_larger_coin` will return the next larger coin denomination from the input, i.e. `next_larger_coin(5)` is `10`.\r\n*   `next_smaller_coin` will return the next smaller coin denomination from the input, i.e. `next_smaller_coin(5)` is `1`.\r\n*   Either function will return `None` if the next coin value does not exist\r\n\r\nThere are two main ways in which you can approach this problem. One way uses `next_larger_coin`, and another uses `next_smaller_coin`. It is up to you which one you want to use!\r\n\r\n**Important:** Use recursion; the tests will fail if you use loops.\r\n\r\n**Hint:** Refer to the [implementation](https://www.composingprograms.com/pages/17-recursive-functions.html#example-partitions) of `count_partitions` for an example of how to count the ways to sum up to a final value with smaller parts. If you need to keep track of more than one value across recursive calls, consider writing a helper function.\r\n\r\n```\r\ndef next_larger_coin(coin):\r\n    '''Returns the next larger coin in order.\r\n    >>> next_larger_coin(1)\r\n    5\r\n    >>> next_larger_coin(5)\r\n    10\r\n    >>> next_larger_coin(10)\r\n    25\r\n    >>> next_larger_coin(2) # Other values return None\r\n    '''\r\n    if coin == 1:\r\n        return 5\r\n    elif coin == 5:\r\n        return 10\r\n    elif coin == 10:\r\n        return 25\r\n\r\ndef next_smaller_coin(coin):\r\n    '''Returns the next smaller coin in order.\r\n    >>> next_smaller_coin(25)\r\n    10\r\n    >>> next_smaller_coin(10)\r\n    5\r\n    >>> next_smaller_coin(5)\r\n    1\r\n    >>> next_smaller_coin(2) # Other values return None\r\n    '''\r\n    if coin == 25:\r\n        return 10\r\n    elif coin == 10:\r\n        return 5\r\n    elif coin == 5:\r\n        return 1\r\n\r\ndef count_coins(total):\r\n    '''Return the number of ways to make change using coins of value of 1, 5, 10, 25.\r\n    >>> count_coins(15)\r\n    6\r\n    >>> count_coins(10)\r\n    4\r\n    >>> count_coins(20)\r\n    9\r\n    >>> count_coins(100) # How many ways to make change for a dollar?\r\n    242\r\n    >>> count_coins(200)\r\n    1463\r\n    >>> from construct_check import check\r\n    >>> # ban iteration\r\n    >>> check(HW_SOURCE_FILE, 'count_coins', ['While', 'For'])\r\n    True\r\n    '''\r\n    '*** YOUR CODE HERE ***'\r\n\r\n\r\n```\r\n\r\n```\r\npython3 ok -q count_coins\r\n```\r\n\r\n:bear:\r\n\r\n```python\r\n# \u8fb9\u754c\u60c5\u51b5\uff1a \u786c\u5e01\u4e3a0\uff0c\u65b9\u6848\u6b63\u786e\u3002", "top": 0, "createdAt": 1721216324, "style": "", "script": "", "head": "", "ogImage": "https://img.icons8.com/doodle/480/mugman.png", "createdDate": "2024-07-17", "dateLabelColor": "#bc4c00"}, "P4": {"htmlDir": "docs/post/cmu15213-fa15-lec25.html", "labels": ["csapp", "cmu15-213", "lecture"], "postTitle": "cmu15213-fa15-lec25", "postUrl": "post/cmu15213-fa15-lec25.html", "postSourceUrl": "https://github.com/LianSeKong/lizi/issues/4", "commentNum": 0, "wordCount": 7895, "description": "\r\n# \u9ad8\u7ea7\r\n\r\n\r\n> \u4f7f\u7528\u4fe1\u53f7\u91cf\u534f\u8c03\u5bf9\u5171\u4eab\u8d44\u6e90\u7684\u8bbf\u95ee\r\n> \u4f7f\u7528\u540c\u6b65\u53ef\u80fd\u4f1a\u8ba9\u4ee3\u7801\u6267\u884c\u53d8\u6162\r\n\r\n\u57fa\u672c\u601d\u60f3\uff1a\u7ebf\u7a0b\u4f7f\u7528\u4fe1\u53f7\u91cf\u64cd\u4f5c\u6765\u901a\u77e5\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u67d0\u4e2a\u6761\u4ef6\u5df2\u53d8\u4e3a\u771f\r\n1. \u4f7f\u7528\u8ba1\u6570\u4fe1\u53f7\u91cf\u6765\u8ddf\u8e2a\u8d44\u6e90\u72b6\u6001\u5e76\u901a\u77e5\u5176\u4ed6\u7ebf\u7a0b\r\n2. \u4f7f\u7528\u4e92\u65a5\u9501\u6765\u4fdd\u62a4\u5bf9\u8d44\u6e90\u7684\u8bbf\u95ee\r\n\r\n\u4e24\u79cd\u5178\u578b\u4f8b\u5b50\uff1a \r\n1. \u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u95ee\u9898\r\n2. \u8bfb\u8005-\u5199\u8005\u95ee\u9898\r\n\r\n### \u751f\u4ea7\u8005-\u6d88\u8d39\u8005\r\n\r\n\u5e38\u89c1\u7684\u540c\u6b65\u6a21\u5f0f\uff1a\r\n1. \u751f\u4ea7\u8005\u7b49\u5f85\u7a7a\u4f4d\uff0c\u5c06\u9879\u76ee\u63d2\u5165\u7f13\u51b2\u533a\uff0c\u5e76\u901a\u77e5\u6d88\u8d39\u8005\u3002", "top": 0, "createdAt": 1721272770, "style": "", "script": "", "head": "", "ogImage": "https://img.icons8.com/doodle/480/mugman.png", "createdDate": "2024-07-18", "dateLabelColor": "#bc4c00"}, "P5": {"htmlDir": "docs/post/cmu15213-fa15-hw12.html", "labels": ["csapp", "cmu15-213", "hw"], "postTitle": "cmu15213-fa15-hw12", "postUrl": "post/cmu15213-fa15-hw12.html", "postSourceUrl": "https://github.com/LianSeKong/lizi/issues/5", "commentNum": 0, "wordCount": 2714, "description": "# HW12\r\n\r\n## 12.16\r\n\r\n```c\r\nvoid* thread(void * vargp) {\r\n    printf('12.16 homework threadId:  %ld!\\n', pthread_self());\r\n    return NULL;\r\n}\r\n\r\nint main(int argc, char **argv) {\r\n    if (argc != 2) {\r\n        fprintf(stderr, 'usage: %s <n>\\n', argv[0]);\r\n        exit(0);\r\n    }\r\n    int n = atoi(argv[1]);\r\n    pthread_t tid[n];\r\n    for (size_t i = 0; i < n; i++) {\r\n        pthread_create(&tid[i], NULL, thread, NULL);\r\n    }\r\n    for (size_t i = 0; i < n; i++) {\r\n        pthread_join(tid[i], NULL); // \u7b49\u5f85\u7ebf\u7a0b\u7ed3\u675f\r\n    }\r\n    exit(0);\r\n}\r\n```\r\n\r\n## 12.17\r\n\r\n```c\r\n\r\nvoid* thread(void * vargp) {\r\n    sleep(1);\r\n    printf('Hello, world!\\n');\r\n    return NULL;\r\n}\r\n\r\nint main(int argc, char **argv) {\r\n    pthread_t tid;\r\n    pthread_create(&tid, NULL, thread, NULL);\r\n    pthread_join(tid, NULL);\r\n    exit(0);\r\n}\r\n\r\n```\r\n\r\n## 12.35\r\n\r\n\r\n\r\n```c\r\nstatic int cnt = 0;\r\n\r\nvoid signchld_handler(int sig) {\r\n    // WNOHANG: \u5982\u679c\u7b49\u5f85\u96c6\u4e2d\u7684\u5b50\u8fdb\u7a0b\u5747\u672a\u7ec8\u6b62\uff0c\u5219\u7acb\u5373\u8fd4\u56de\uff08\u8fd4\u56de\u503c\u4e3a 0\uff09\u3002", "top": 0, "createdAt": 1721383737, "style": "", "script": "", "head": "", "ogImage": "https://img.icons8.com/doodle/480/mugman.png", "createdDate": "2024-07-19", "dateLabelColor": "#bc4c00"}, "P6": {"htmlDir": "docs/post/ubuntu-shang-an-zhuang-mysql.html", "labels": ["database", "mysql"], "postTitle": "ubuntu\u4e0a\u5b89\u88c5mysql", "postUrl": "post/ubuntu-shang-an-zhuang-mysql.html", "postSourceUrl": "https://github.com/LianSeKong/lizi/issues/6", "commentNum": 0, "wordCount": 740, "description": "# Ubuntu Install Mysql\r\n\r\n1. \u66f4\u65b0\u8f6f\u4ef6\u5305\r\n\r\n   ```shell\r\n   sudo apt install update\r\n   ```\r\n\r\n2. \u5b89\u88c5mysql\u670d\u52a1\u5668\r\n\r\n   ```shell\r\n   sudo apt install mysql-server\r\n   ```\r\n\r\n3. \u542f\u52a8\u670d\u52a1\r\n\r\n   ```shell\r\n   sudo systemctl start mysql\r\n   ```\r\n\r\n4. \u5f00\u673a\u81ea\u542f\u52a8\r\n\r\n   ```shell\r\n   sudo systemctl enable mysql\r\n   ```\r\n\r\n5. \u4fee\u6539\u5bc6\u7801\r\n\r\n   ```shell\r\n   # \u767b\u5f55, \u56e0\u4e3a\u6ca1\u6709\u8bbe\u7f6e\u5bc6\u7801\uff0c\u7ba1\u7406\u5458\u4e0b\u76f4\u63a5\u4ee5root\u7528\u6237\u767b\u5f55\r\n   sudo mysql\r\n   \r\n   ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password';\r\n   flush privileges;\r\n   # \r\n   \r\n   ```\r\n\r\n6. \u521b\u5efa\u65b0\u7528\u6237\r\n\r\n   ```sql\r\n    // % \u4ee3\u8868\u6240\u6709\u5730\u5740\u90fd\u53ef\u901a\u8fc7\u6b64\u7528\u6237\u767b\u5f55\r\n   CREATE USER 'lpf'@'%' IDENTIFIED BY '123';\r\n   \r\n   ```\r\n7. \u591f\u4fa6\u542c\u8fdc\u7a0b\u53ef\u8bbf\u95ee\u7684\u63a5\u53e3 \r\n\r\n\t``` shell\r\n\tsudo nvim /etc/mysql/mysql.conf.d/mysqld.cnf\r\n\t\r\n\t```\r\n\t`bind-address = 0.0.0.0`\r\n\r\n\t\r\n   \r\n\r\n\u3002", "top": 0, "createdAt": 1721460513, "style": "", "script": "", "head": "", "ogImage": "https://img.icons8.com/doodle/480/mugman.png", "createdDate": "2024-07-20", "dateLabelColor": "#bc4c00"}, "P7": {"htmlDir": "docs/post/Proxy Lab.html", "labels": ["csapp", "cmu15-213", "lab"], "postTitle": "Proxy Lab", "postUrl": "post/Proxy%20Lab.html", "postSourceUrl": "https://github.com/LianSeKong/lizi/issues/7", "commentNum": 0, "wordCount": 10625, "description": "# Proxy Lab\r\n\r\n\r\n>  \u672c\u5b9e\u9a8c\u662fCSAPP\u7684\u6700\u540e\u4e00\u4e2a\u5b9e\u9a8c\uff0c\u5927\u90e8\u5206\u5185\u5bb9\u90fd\u53ef\u53c2\u8003\u4e66\u5185\u6837\u4f8b\r\n>  \u5b9e\u9a8c\u4e3b\u8981\u6d89\u53ca\u4e86IO\u3001\u591a\u7ebf\u7a0b\u3001\u7f51\u7edc\u7f16\u7a0b\u548c\u5e76\u884c\u7b49\u65b9\u9762\u5185\u5bb9\r\n>  Web\u4ee3\u7406\u662f\u4e00\u4e2a\u5728Web\u6d4f\u89c8\u5668\u548c\u7ec8\u7aef\u670d\u52a1\u5668\u4e4b\u95f4\u5145\u5f53\u4e2d\u95f4\u4eba\u7684\u7a0b\u5e8f\u3002", "top": 0, "createdAt": 1721890955, "style": "", "script": "", "head": "", "ogImage": "https://img.icons8.com/doodle/480/mugman.png", "createdDate": "2024-07-25", "dateLabelColor": "#bc4c00"}, "P8": {"htmlDir": "docs/post/Malloc lab.html", "labels": ["csapp", "cmu15-213", "lab"], "postTitle": "Malloc lab", "postUrl": "post/Malloc%20lab.html", "postSourceUrl": "https://github.com/LianSeKong/lizi/issues/8", "commentNum": 0, "wordCount": 17166, "description": "# Malloc lab \r\n\r\n## \u9690\u5f0f\u5217\u8868  78 / 100 points\r\n\r\n\r\n``` c \r\n/*\r\n * mm-naive.c - The fastest, least memory-efficient malloc package.\r\n\r\n */\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <assert.h>\r\n#include <unistd.h>\r\n#include <string.h>\r\n\r\n#include 'mm.h'\r\n#include 'memlib.h'\r\n\r\nteam_t team = {\r\n    /* Team name */\r\n    'Cranberry', // \u8513\u8d8a\u8393\r\n    /* First member's full name */\r\n    'Lizi',\r\n    /* First member's email address */\r\n    'liansekong@gmail.com',\r\n    /* Second member's full name (leave blank if none) */\r\n    '',\r\n    /* Second member's email address (leave blank if none) */\r\n    ''};\r\n\r\n/* single word (4) or double word (8) alignment */\r\n#define ALIGNMENT 8\r\n\r\n/* rounds up to the nearest multiple of ALIGNMENT */\r\n#define ALIGN(size) (((size) + (ALIGNMENT - 1)) & ~0x7)\r\n\r\n#define SIZE_T_SIZE (ALIGN(sizeof(size_t)))\r\n\r\n#define WSIZE 4\r\n#define DSIZE 8\r\n\r\n// bytes\r\n#define CHUNKSIZE (1 << 12) // 4096 bytes ->  4kb page size\r\n\r\n#define MAX(x, y) ((x) > (y) ? (x) : (y))\r\n\r\n// Pack a size and allocated bit into a word\r\n#define PACK(size, alloc) ((size) | (alloc))\r\n\r\n// Read and write a word at address p\r\n#define GET(p) (*(unsigned int *)(p))\r\n#define PUT(p, val) (*(unsigned int *)(p) = (val))\r\n\r\n// Read the size and allocated fields from address p\r\n// Size \u4e3a\u6574\u4e2a\u5757\u5927\u5c0f\r\n#define GET_SIZE(p) (GET(p) & ~0x7)\r\n#define GET_ALLOC(p) (GET(p) & 0x1)\r\n\r\n// bp\u6307\u5411\u7b2c\u4e00\u4e2a\u6709\u6548\u8f7d\u8377\u5b57\u8282\r\n#define HDRP(bp) ((char *)(bp) - WSIZE)\r\n#define FTRP(bp) ((char *)(bp) + GET_SIZE(HDRP(bp)) - DSIZE)\r\n\r\n#define NEXT_BLKP(bp) ((char *)(bp) + GET_SIZE(((char *)(bp) - WSIZE)))\r\n#define PREV_BLKP(bp) ((char *)(bp) - GET_SIZE(((char *)(bp) - DSIZE)))\r\n\r\nstatic void *extend_heap(size_t words);\r\nstatic void *coalesce(void *bp);\r\nstatic void *find_fit(size_t asize);\r\nstatic void place(void *bp, size_t size);\r\n\r\nvoid *mm_malloc(size_t size);\r\n\r\nchar *heap_listp;\r\n\r\n/*\r\n * mm_init - initialize the malloc package.\r\n */\r\nint mm_init(void)\r\n{\r\n\r\n    if ((heap_listp = mem_sbrk(4 * WSIZE)) == (void *)-1)\r\n    {\r\n        return -1;\r\n    }\r\n\r\n    PUT(heap_listp, 0);                            // \u8d77\u59cb\u4f4d\u7f6e\r\n    PUT(heap_listp + (1 * WSIZE), PACK(DSIZE, 1)); // \u5e8f\u8a00\u5757 8/1\r\n    PUT(heap_listp + (2 * WSIZE), PACK(DSIZE, 1)); // \u5e8f\u8a00\u5757 8/1\r\n    PUT(heap_listp + (3 * WSIZE), PACK(0, 1));     // \u7ed3\u5c3e\u5757 0/1\r\n\r\n    // \u6307\u5411\u7b2c\u4e8c\u4e2a\u5e8f\u8a00\u5757\r\n    heap_listp += (2 * WSIZE);\r\n\r\n    if (extend_heap(CHUNKSIZE) == NULL)\r\n        return -1;\r\n    // printf('init finsh!\\n');\r\n    return 0;\r\n}\r\n\r\n/**\r\n * \u9996\u6b21\u5339\u914d\r\n */\r\n\r\nstatic void *find_fit(size_t asize)\r\n{\r\n    char *start_bp = heap_listp + DSIZE;\r\n    while (GET_SIZE(HDRP(start_bp)) > 0)\r\n    {\r\n        if (GET_ALLOC(HDRP(start_bp)) == 0 && (GET_SIZE(HDRP(start_bp)) >= asize))\r\n        {\r\n            return start_bp;\r\n        }\r\n        start_bp = NEXT_BLKP(start_bp);\r\n    }\r\n    return NULL;\r\n}\r\n\r\n/**\r\n * \u8bbe\u7f6e\u5206\u914d\u5757\r\n * 1. \u8bbe\u7f6e\u5206\u914d\u4f4d\u4e3a1\r\n * 2. \u5206\u5272\u7a7a\u95f2\u5757\r\n */\r\nstatic void place(void *bp, size_t size)\r\n{\r\n    size_t cur_bk_size = GET_SIZE(HDRP(bp));\r\n    if (cur_bk_size - size >= DSIZE * 2)\r\n    {\r\n        PUT(HDRP(bp), PACK(size, 1));\r\n        PUT(FTRP(bp), PACK(size, 1));\r\n        PUT(HDRP(NEXT_BLKP(bp)), PACK(cur_bk_size - size, 0));\r\n        PUT(FTRP(NEXT_BLKP(bp)), PACK(cur_bk_size - size, 0));\r\n    }\r\n    else\r\n    {\r\n        PUT(HDRP(bp), PACK(cur_bk_size, 1));\r\n        PUT(FTRP(bp), PACK(cur_bk_size, 1));\r\n    }\r\n}\r\n\r\n/*\r\n * mm_malloc - Allocate a block by incrementing the brk pointer.\r\n *     Always allocate a block whose size is a multiple of the alignment.\r\n */\r\nvoid *mm_malloc(size_t size)\r\n{\r\n    if (size == 0)\r\n    {\r\n        return NULL;\r\n    }\r\n    // payload + padding + hdr + ftr\r\n    // Double word algin\r\n    size_t asize = ALIGN(size) + DSIZE;\r\n    size_t extend_size;\r\n    char *bp;\r\n    // \u5bfb\u627e\u7a7a\u95f2\u5757\r\n    if ((bp = find_fit(asize)) != NULL)\r\n    {\r\n        place(bp, asize);\r\n        return bp;\r\n    }\r\n    // \u65e0\u7a7a\u95f2\u5217\u8868\uff0c\u5219\u5411\u7cfb\u7edf\u7533\u8bf7\u5206\u914d\u5185\u5b58\uff0c \u6700\u5c0f\u5355\u4f4d\u4e3a 4kb\r\n    extend_size = MAX(asize, CHUNKSIZE);\r\n    if ((bp = extend_heap(extend_size)) == NULL)\r\n        return NULL;\r\n    place(bp, asize);\r\n    return bp;\r\n}\r\n\r\n/*\r\n * mm_free - Freeing a block does nothing.\r\n */\r\nvoid mm_free(void *bp)\r\n{\r\n    // \u83b7\u53d6\u5f53\u524d\u5757\u7684\u5927\u5c0f\r\n    size_t size = GET_SIZE(HDRP(bp));\r\n    // \u8bbe\u7f6e\u5934\u5c3e\u4e3a\u672a\u5206\u914d\r\n    PUT(HDRP(bp), PACK(size, 0));\r\n    PUT(FTRP(bp), PACK(size, 0));\r\n    // \u5408\u5e76\r\n    coalesce(bp);\r\n}\r\n\r\n/*\r\n * mm_realloc - Implemented simply in terms of mm_malloc and mm_free\r\n */\r\n\r\nvoid *mm_realloc(void *ptr, size_t size)\r\n{\r\n    if (ptr == NULL)\r\n    {\r\n        return mm_malloc(size);\r\n    }\r\n    if (size == 0)\r\n    {\r\n        mm_free(ptr);\r\n        return NULL;\r\n    }\r\n\r\n    size_t asize = ALIGN(size) + DSIZE;\r\n    size_t cur_bk_size = GET_SIZE(HDRP(ptr));\r\n\r\n    if (cur_bk_size == asize)\r\n    {\r\n        return ptr;\r\n    }\r\n    else if (cur_bk_size < asize)\r\n    {\r\n        // expand\r\n        char *new_ptr = mm_malloc(size);\r\n        memcpy(new_ptr, ptr, cur_bk_size - DSIZE);\r\n        mm_free(ptr);\r\n        return new_ptr;\r\n    }\r\n    else\r\n    {\r\n        // shrink\r\n        if (cur_bk_size - asize <= 2 * DSIZE)\r\n        {\r\n            return ptr;\r\n        }\r\n        else\r\n        {\r\n            place(ptr, asize);\r\n            return ptr;\r\n        }\r\n    }\r\n}\r\n\r\n// 1. \u5806\u521d\u59cb\u5316\u65f6\u8c03\u7528\r\n// 2. mm_malloc\u4e0d\u80fd\u627e\u5230\u4e00\u4e2a\u5408\u9002\u7684\u5339\u914d\u5757\u65f6\r\nstatic void *extend_heap(size_t size)\r\n{\r\n    size_t asize = size % CHUNKSIZE == 0 ? size : ((size / CHUNKSIZE) + 1) * CHUNKSIZE;\r\n    char *bp;\r\n    if ((bp = mem_sbrk(asize)) == (void *)-1)\r\n    {\r\n        return NULL;\r\n    }\r\n    // \u5206\u914dblock\u65f6bp\u6307\u5411\u5757\u7684\u5934\u90e8\u8868\uff0c bp\u524d\u4e00\u4e2a\u5757\u4e3a\u4e4b\u524d\u7684\u7ed3\u5c3e\u5757\uff080/1\uff09\r\n    // \u6b64\u65f6\u5c06\u4e4b\u524d\u7684\u7ed3\u5c3e\u5757\u5f53\u4f5c\u5934\u90e8\uff0c\u73b0\u5728\u5206\u914d\u5757\u7684\u6700\u540e\u4e00\u4e2aword\u8bbe\u4e3a\u7ed3\u5c3e\u5757\r\n    PUT(HDRP(bp), PACK(asize, 0));\r\n    PUT(FTRP(bp), PACK(asize, 0));\r\n    PUT(HDRP(NEXT_BLKP(bp)), PACK(0, 1));\r\n    return coalesce(bp);\r\n}\r\n\r\nstatic void *coalesce(void *bp)\r\n{\r\n    size_t prev_alloc = GET_ALLOC(FTRP(PREV_BLKP(bp)));\r\n    size_t next_alloc = GET_ALLOC(FTRP(NEXT_BLKP(bp)));\r\n\r\n    size_t size = GET_SIZE(HDRP(bp));\r\n    if (prev_alloc && next_alloc)\r\n    {\r\n        return bp;\r\n    }\r\n    if (prev_alloc && !next_alloc)\r\n    {\r\n        size += GET_SIZE(HDRP(NEXT_BLKP(bp)));\r\n        PUT(HDRP(bp), PACK(size, 0));\r\n        PUT(FTRP(bp), PACK(size, 0));\r\n    }\r\n    else if (!prev_alloc && next_alloc)\r\n    {\r\n        size += GET_SIZE(HDRP(PREV_BLKP(bp)));\r\n        PUT(FTRP(bp), PACK(size, 0));\r\n        PUT(HDRP(PREV_BLKP(bp)), PACK(size, 0));\r\n        bp = PREV_BLKP(bp);\r\n    }\r\n    else\r\n    {\r\n        size += GET_SIZE(HDRP(PREV_BLKP(bp))) + GET_SIZE(HDRP(NEXT_BLKP(bp)));\r\n        PUT(HDRP(PREV_BLKP(bp)), PACK(size, 0));\r\n        PUT(FTRP(NEXT_BLKP(bp)), PACK(size, 0));\r\n        bp = PREV_BLKP(bp);\r\n    }\r\n    return bp;\r\n}\r\n\r\n```\r\n\r\n## \u5206\u79bb\u5217\u8868\r\n\r\n``` c\r\n/*\r\n\r\n * mm-naive.c - The fastest, least memory-efficient malloc package.\r\n */\r\n\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <assert.h>\r\n#include <unistd.h>\r\n#include <string.h>\r\n#include 'mm.h'\r\n#include 'memlib.h'\r\n\r\nteam_t team = {\r\n    /* Team name */\r\n    'Cranberry', // \u8513\u8d8a\u8393\r\n    /* First member's full name */\r\n    'Lizi',\r\n    /* First member's email address */\r\n    'liansekong@gmail.com',\r\n    /* Second member's full name (leave blank if none) */\r\n    '',\r\n    /* Second member's email address (leave blank if none) */\r\n    ''\r\n};\r\n\r\n/* single word (4) or double word (8) alignment */\r\n#define ALIGNMENT 8\r\n/* rounds up to the nearest multiple of ALIGNMENT */\r\n#define ALIGN(size) (((size) + (ALIGNMENT - 1)) & ~0x7)\r\n\r\n#define WSIZE 4\r\n#define DSIZE 8\r\n#define MINI_BLOCK_SIZE 16\r\n\r\n// SEG_LIST\r\n\r\n#define SEG_LIST_LEN 15\r\n\r\n// 4096 bytes ->  4kb page size\r\n\r\n#define CHUNKSIZE (1 << 12)\r\n\r\n#define MAX(x, y) ((x) > (y) ? (x) : (y))\r\n\r\n// Pack a size and allocated bit into a word\r\n\r\n#define PACK(size, alloc) ((size) | (alloc))\r\n\r\n// Read and write a word at address p\r\n\r\n#define GET(p) (*(unsigned int *)(p))\r\n\r\n#define PUT(p, val) (*(unsigned int *)(p) = (val))\r\n\r\n// Read the size and allocated fields from address p\r\n\r\n#define GET_SIZE(p) (GET(p) & ~0x7)\r\n\r\n#define GET_ALLOC(p) (GET(p) & 0x1)\r\n\r\n// bp\u6307\u5411\u7b2c\u4e00\u4e2a\u6709\u6548\u8f7d\u8377\u5b57\u8282\r\n\r\n#define HDRP(bp) ((char *)(bp) - WSIZE)\r\n#define FTRP(bp) ((char *)(bp) + GET_SIZE(HDRP(bp)) - DSIZE)\r\n#define NEXT_BLKP(bp) ((char *)(bp) + GET_SIZE(((char *)(bp) - WSIZE)))\r\n#define PREV_BLKP(bp) ((char *)(bp) - GET_SIZE(((char *)(bp) - DSIZE)))\r\n#define PREV(bp) ((char *)(bp))\r\n#define SUCC(bp) ((char *)(bp) + WSIZE)\r\n\r\n// \u5206\u79bb\u7a7a\u95f2\u94fe\u8868\r\n\r\n// \u6839\u636e\u4e0b\u6807\u83b7\u53d6\u5206\u79bb\u7a7a\u95f2\u5217\u8868\u7684\u5143\u7d20\r\n#define ITEM_OF_FREE_LIST(listp, index) ((listp) + ((index) * (WSIZE) * 4))\r\n\r\n#define PREV_FREE_BLKP(bp) (GET(bp))\r\n#define SUCC_FREE_BLKP(bp) (GET((char *)(bp) + WSIZE))\r\n\r\nstatic void *extend_heap(size_t words);\r\n\r\nstatic void *coalesce(void *bp);\r\n\r\nstatic void *find_fit(size_t asize);\r\n\r\nstatic void place(void *bp, size_t size);\r\n\r\nstatic size_t find_index(size_t size);\r\n\r\nstatic void disconnect(void *bp);\r\n\r\nvoid *mm_malloc(size_t size);\r\n\r\nstatic void place_free(void *bp);\r\n\r\nchar *seg_listp;\r\n\r\nchar *heap_listp;\r\n\r\n/*\r\n\r\n * mm_init - initialize the malloc package.\r\n\r\n */\r\n\r\nint mm_init(void)\r\n{\r\n    /**\r\n     * \u5206\u79bb\u7a7a\u95f2\u5217\u8868\uff1aseg_list\r\n     * 1. \u6bcf\u4e2a\u5217\u8868\u5934\u4e3a\uff1a 4 Word \r\n     *      * Header: size (32) + allocated bit (001) \r\n     *      * Prev: \u4e0a\u4e00\u4e2a\u7a7a\u95f2\u5217\u8868\u7684\u5730\u5740 \r\n     *      * Succ: \u4e0b\u4e00\u4e2a\u7a7a\u5fc3\u5217\u8868\u7684\u5730\u5740\r\n     *      * Footer: size (32) + allocated bit (001) \r\n     * 2. \u5217\u8868\u7684\u5143\u7d20\u4e3a\uff1a\r\n     *      * Header: size (32) + allocated bit (001)\r\n     *      * Prev: \u4e0a\u4e00\u4e2a\u7a7a\u95f2\u5217\u8868\u7684\u5730\u5740 \r\n     *      * Succ: \u4e0b\u4e00\u4e2a\u7a7a\u5fc3\u5217\u8868\u7684\u5730\u5740\r\n     *      * Payload\r\n     *      * Footer: size (32) + allocated bit (001)    \r\n     */\r\n    if ((seg_listp = mem_sbrk(SEG_LIST_LEN * WSIZE * 4)) == (void *)-1)\r\n    {\r\n        return -1;\r\n    }\r\n    seg_listp = seg_listp + WSIZE; // \u6307\u5411\u9996\u4e2a\u5217\u8868\u7684\u5757\u4f4d\u7f6e\r\n    // \u521d\u59cb\u5316\u7a7a\u95f2\u5217\u8868\r\n    for (size_t i = 0; i < SEG_LIST_LEN; i++)\r\n    {\r\n        char *bp = ITEM_OF_FREE_LIST(seg_listp, i);\r\n        PUT(HDRP(bp), PACK(4 * WSIZE, 1));\r\n        PUT(FTRP(bp), PACK(4 * WSIZE, 1));\r\n        PUT(PREV(bp), 0);\r\n        PUT(SUCC(bp), 0);\r\n    }\r\n    // \u521d\u59cb\u5316\u9690\u5f0f\u5217\u8868\r\n    if ((heap_listp = mem_sbrk(4 * WSIZE)) == (void *)-1)\r\n    {\r\n        return -1;\r\n    }\r\n\r\n    PUT(heap_listp, 0);                            // \u8d77\u59cb\u4f4d\u7f6e\r\n    PUT(heap_listp + (1 * WSIZE), PACK(DSIZE, 1)); // \u5e8f\u8a00\u5757 8/1\r\n    PUT(heap_listp + (2 * WSIZE), PACK(DSIZE, 1)); // \u5e8f\u8a00\u5757 8/1\r\n    PUT(heap_listp + (3 * WSIZE), PACK(0, 1));     // \u7ed3\u5c3e\u5757 0/1\r\n\r\n    // \u6307\u5411\u666e\u901a\u5757\u8d77\u59cb\u4f4d\u7f6e\r\n    heap_listp += (2 * WSIZE);\r\n\r\n    char *bp;\r\n    if ((bp = extend_heap(CHUNKSIZE)) == NULL) {\r\n        return -1;\r\n    }\r\n    return 0;\r\n}\r\n\r\n/**\r\n * find_fit - \u5bfb\u627e\u7a7a\u95f2\u5757\r\n * \u7b56\u7565\uff1a \u9996\u6b21\u5339\u914d\r\n * \r\n */\r\nstatic void *find_fit(size_t asize) {\r\n    size_t index = find_index(asize);\r\n    for (size_t i = index; i < SEG_LIST_LEN; i++)\r\n    {\r\n        char *cur_free_bp = ITEM_OF_FREE_LIST(seg_listp, i);\r\n        char *succ_free_bp = SUCC_FREE_BLKP(cur_free_bp);\r\n        while (succ_free_bp != 0)\r\n        {\r\n            if (succ_free_bp != 0 && GET_SIZE(HDRP(succ_free_bp)) >= asize)\r\n            {\r\n                return succ_free_bp;\r\n            }\r\n            succ_free_bp = SUCC_FREE_BLKP(succ_free_bp);\r\n        }\r\n    }\r\n    return NULL;\r\n}\r\n\r\n/**\r\n * - disconnect \u65ad\u5f00\u5728\u7a7a\u95f2\u94fe\u8868\u4e2d\u7684\u8fde\u63a5\r\n * \r\n */\r\nstatic void disconnect(void *bp)\r\n{\r\n    char *prev_free_bp = PREV_FREE_BLKP(bp);\r\n    char *succ_free_bp = SUCC_FREE_BLKP(bp);\r\n\r\n    PUT(SUCC(prev_free_bp), succ_free_bp);\r\n    if (succ_free_bp != 0)\r\n    {\r\n        PUT(PREV(succ_free_bp), prev_free_bp);\r\n    }\r\n}\r\n\r\n/**\r\n\r\n * Allocated block\r\n\r\n * hdr (4bytes): size(29bit) allocated bit(001)(3bit)\r\n * payload\r\n * padding\r\n * ftr (4bytes): size(29bit) allocated bit(001)(3bit)\r\n *\r\n * Free block\r\n * hdr (4bytes): size(29bit) allocated bit(000)(3bit) (010) \u4ee3\u8868\u524d\u4e00\u4e2a\u5757\r\n * succ\r\n * payload\r\n * padding\r\n * ftr (4bytes): size(29bit) allocated bit(001)(3bit)\r\n */\r\n\r\nstatic void place(void *bp, size_t size) {\r\n    disconnect(bp);\r\n    size_t cur_bk_size = GET_SIZE(HDRP(bp));\r\n    size_t remaining_size = cur_bk_size - size;\r\n    if (remaining_size >= MINI_BLOCK_SIZE) {\r\n        PUT(HDRP(bp), PACK(size, 1));\r\n        PUT(FTRP(bp), PACK(size, 1));\r\n        PUT(HDRP(NEXT_BLKP(bp)), PACK(remaining_size, 0));\r\n        PUT(FTRP(NEXT_BLKP(bp)), PACK(remaining_size, 0));\r\n        place_free(NEXT_BLKP(bp));\r\n    }\r\n    else\r\n    {\r\n        PUT(HDRP(bp), PACK(cur_bk_size, 1));\r\n        PUT(FTRP(bp), PACK(cur_bk_size, 1));\r\n    }\r\n}\r\n\r\n/*\r\n\r\n * mm_malloc - Allocate a block by incrementing the brk pointer.\r\n\r\n *     Always allocate a block whose size is a multiple of the alignment.\r\n\r\n */\r\n\r\nvoid *mm_malloc(size_t size)\r\n{\r\n    if (size == 0) {\r\n        return NULL;\r\n    }\r\n\r\n    size_t asize = ALIGN(size) + DSIZE;\r\n    size_t extend_size;\r\n    char *bp;\r\n\r\n    if ((bp = find_fit(asize)) != NULL) {\r\n        place(bp, asize);\r\n        return bp;\r\n    }\r\n\r\n    // \u65e0\u7a7a\u95f2\u5217\u8868\uff0c\u5219\u5411\u7cfb\u7edf\u7533\u8bf7\u5206\u914d\u5185\u5b58\uff0c \u6700\u5c0f\u5355\u4f4d\u4e3a 4kb\r\n    extend_size = MAX(asize, CHUNKSIZE);\r\n    \r\n    if ((bp = extend_heap(extend_size)) == NULL)\r\n        return NULL;\r\n    place(bp, asize);\r\n    return bp;\r\n}\r\n\r\nstatic void place_free(void *bp)\r\n{\r\n    size_t index = find_index(GET_SIZE(HDRP(bp)));\r\n    char *start_bp = ITEM_OF_FREE_LIST(seg_listp, index);\r\n\r\n    // \u6839\u636eDIFO\u7b56\u7565\u5bfb\u627e\u5408\u9002\u4f4d\u7f6e\r\n    while (SUCC_FREE_BLKP(start_bp)!= 0)\r\n    {\r\n        if (SUCC_FREE_BLKP(start_bp) > (unsigned int)bp)\r\n        {\r\n            break;\r\n        }\r\n        start_bp = SUCC_FREE_BLKP(start_bp);\r\n    }\r\n\r\n    // \u5728\u5408\u9002\u4f4d\u7f6e\u5efa\u7acb\u94fe\u63a5start_bp_succ\r\n    char *start_bp_succ = SUCC_FREE_BLKP(start_bp);\r\n    PUT(SUCC(start_bp), bp);\r\n    PUT(PREV(bp), start_bp);\r\n    PUT(SUCC(bp), start_bp_succ);\r\n    if (start_bp_succ != 0) {\r\n        PUT(PREV(start_bp_succ), bp);\r\n    }\r\n}\r\n\r\n/*\r\n * mm_free - Freeing a block does nothing.\r\n */\r\n\r\nvoid mm_free(void *bp) {\r\n    size_t size = GET_SIZE(HDRP(bp));\r\n    PUT(HDRP(bp), PACK(size, 0));\r\n    PUT(FTRP(bp), PACK(size, 0));\r\n    coalesce(bp);\r\n}\r\n\r\n/*\r\n * mm_realloc - Implemented simply in terms of mm_malloc and mm_free\r\n */\r\n\r\nvoid *mm_realloc(void *ptr, size_t size)\r\n{\r\n    if (ptr == NULL) {\r\n        return mm_malloc(size);\r\n    }\r\n    if (size == 0) {\r\n        mm_free(ptr);\r\n        return NULL;\r\n    }\r\n    \r\n    size_t asize = ALIGN(size) + DSIZE;\r\n    size_t cur_bk_size = GET_SIZE(HDRP(ptr));\r\n\r\n    if (cur_bk_size == asize) {\r\n        return ptr;\r\n    } else if (cur_bk_size < asize)\r\n    {\r\n        char *new_ptr = mm_malloc(size);\r\n        memcpy(new_ptr, ptr, cur_bk_size - DSIZE);\r\n        mm_free(ptr);\r\n        return new_ptr;\r\n    } else {\r\n        // shrink\r\n         size_t remaining_size = cur_bk_size - asize;\r\n        if (remaining_size >= MINI_BLOCK_SIZE)\r\n        {\r\n            PUT(HDRP(ptr), PACK(size, 1));\r\n            PUT(FTRP(ptr), PACK(size, 1));\r\n            PUT(HDRP(NEXT_BLKP(ptr)), PACK((remaining_size), 0));\r\n            PUT(FTRP(NEXT_BLKP(ptr)), PACK((remaining_size), 0));\r\n            coalesce(NEXT_BLKP(ptr));\r\n        }\r\n        return ptr;\r\n    }\r\n}\r\n\r\nstatic void *extend_heap(size_t size) {\r\n    size_t asize = size % CHUNKSIZE == 0 ? size : ((size / CHUNKSIZE) + 1) * CHUNKSIZE;\r\n    char *bp;\r\n    if ((bp = mem_sbrk(asize)) == (void *)-1)\r\n    {\r\n        return NULL;\r\n    }\r\n    PUT(HDRP(bp), PACK(asize, 0));\r\n    PUT(FTRP(bp), PACK(asize, 0));\r\n    PUT(HDRP(NEXT_BLKP(bp)), PACK(0, 1));\r\n\r\n    size_t prev_alloc = GET_ALLOC(HDRP(PREV_BLKP(bp)));\r\n    if (!prev_alloc)\r\n    {\r\n        disconnect(PREV_BLKP(bp));\r\n        asize += GET_SIZE(HDRP(PREV_BLKP(bp)));\r\n        PUT(FTRP(bp), PACK(asize, 0));\r\n        PUT(HDRP(PREV_BLKP(bp)), PACK(asize, 0));\r\n        bp = PREV_BLKP(bp);\r\n    }\r\n    place_free(bp);\r\n    return bp;\r\n}\r\n\r\nstatic void *coalesce(void *bp) {\r\n\r\n    size_t size = GET_SIZE(HDRP(bp));\r\n    size_t prev_alloc = GET_ALLOC(HDRP(PREV_BLKP(bp)));\r\n    size_t next_alloc = GET_ALLOC(HDRP(NEXT_BLKP(bp)));\r\n    if (prev_alloc && next_alloc)\r\n    {\r\n        place_free(bp);\r\n        return bp;\r\n    }\r\n\r\n    if (prev_alloc && !next_alloc)\r\n    {\r\n        disconnect(NEXT_BLKP(bp));\r\n        size += GET_SIZE(HDRP(NEXT_BLKP(bp)));\r\n        PUT(HDRP(bp), PACK(size, 0));\r\n        PUT(FTRP(bp), PACK(size, 0));\r\n        place_free(bp);\r\n    } else if (!prev_alloc && next_alloc) {\r\n        disconnect(PREV_BLKP(bp));\r\n        size += GET_SIZE(HDRP(PREV_BLKP(bp)));\r\n        PUT(FTRP(bp), PACK(size, 0));\r\n        PUT(HDRP(PREV_BLKP(bp)), PACK(size, 0));\r\n        bp = PREV_BLKP(bp);\r\n        place_free(bp);\r\n    } else\r\n    {\r\n        disconnect(NEXT_BLKP(bp));\r\n        disconnect(PREV_BLKP(bp));\r\n        size += GET_SIZE(HDRP(PREV_BLKP(bp))) + GET_SIZE(HDRP(NEXT_BLKP(bp)));\r\n        PUT(HDRP(PREV_BLKP(bp)), PACK(size, 0));\r\n        PUT(FTRP(NEXT_BLKP(bp)), PACK(size, 0));\r\n        bp = PREV_BLKP(bp);\r\n        place_free(bp);\r\n    }\r\n    return bp;\r\n}\r\n\r\nstatic size_t find_index(size_t size)\r\n{\r\n    if (size <= 16)\r\n        return 0;\r\n    if (size <= 32)\r\n        return 1;\r\n    if (size <= 64)\r\n        return 2;\r\n    if (size <= 80)\r\n        return 3;\r\n    if (size <= 120)\r\n        return 4;\r\n    if (size <= 240)\r\n        return 5;\r\n    if (size <= 480)\r\n        return 6;\r\n    if (size <= 960)\r\n        return 7;\r\n    if (size <= 1920)\r\n        return 8;\r\n    if (size <= 3840)\r\n        return 9;\r\n    if (size <= 4096)\r\n        return 10;\r\n    if (size <= 15360)\r\n        return 11;\r\n    if (size <= 30720)\r\n        return 12;\r\n    if (size <= 61440)\r\n        return 13;\r\n    else\r\n        return 14;\r\n}\r\n```\r\n\u3002", "top": 0, "createdAt": 1722939209, "style": "", "script": "", "head": "", "ogImage": "https://img.icons8.com/doodle/480/mugman.png", "createdDate": "2024-08-06", "dateLabelColor": "#bc4c00"}, "P9": {"htmlDir": "docs/post/cs61c-sp24-lab01.html", "labels": ["lab", "cs61c"], "postTitle": "cs61c-sp24-lab01", "postUrl": "post/cs61c-sp24-lab01.html", "postSourceUrl": "https://github.com/LianSeKong/lizi/issues/9", "commentNum": 0, "wordCount": 30656, "description": "# Snake\r\n\r\n> creating a playable snake game\r\n\r\n## Conceptual Overview\r\n\r\n### Snakes\r\n\r\nA snake game can be represented by a grid of characters. \r\n\r\nThe grid contains walls, fruits, and one or more snakes. \r\n\r\nAn example of a game is shown below:\r\n\r\n```javascript\r\n##############\r\n#            #\r\n#    dv      #\r\n#     v   #  #\r\n#     v   #  #\r\n#   s >>D #  #\r\n#   v     #  #\r\n# *A<  *  #  #\r\n#            #\r\n##############\r\n```\r\n\r\nThe grid has the following special characters:\r\n\r\n*   `#` denotes a wall.\r\n*   (space character) denotes an empty space.\r\n*   `*` denotes a fruit.\r\n*   `wasd` denotes the tail of a snake.\r\n*   `^<v>` denotes the body of a snake.\r\n*   `WASD` denotes the head of a snake.\r\n*   `x` denotes the head of a snake that has died.\r\n\r\nEach character of the snake tells you what direction the snake is currently heading in:\r\n\r\n*   `w`, `W`, or `^` denotes up\r\n*   `a`, `A`, or `<` denotes left\r\n*   `s`, `S`, or `v` denotes down\r\n*   `d`, `D`, or `>` denotes right\r\n\r\nAt each time step, each snakes moves according to the following rules:\r\n\r\n*   Each snake moves one step in the direction of its head.\r\n*   If the head crashes into the body of a snake or a wall, the snake dies and stops moving. When a snake dies, the head is replaced with an `x`.\r\n*   If the head moves into a fruit, the snake eats the fruit and grows by 1 unit in length. Each time fruit is consumed, a new fruit is generated on the board.\r\n\r\nIn the example above, after one time step, the board will look like this:\r\n\r\n```\r\n##############\r\n#         *  #\r\n#     s      #\r\n#     v   #  #\r\n#     v   #  #\r\n#   s >>>D#  #\r\n#   v     #  #\r\n# A<<  *  #  #\r\n#            #\r\n##############\r\n```\r\n\r\nAfter one more time step, the board will look like this:\r\n\r\n```\r\n##############\r\n#         *  #\r\n#     s      #\r\n#     v   #  #\r\n#     v   #  #\r\n#     >>>x#  #\r\n#   s     #  #\r\n#A<<<  *  #  #\r\n#            #\r\n##############\r\n```\r\n\r\nSnakes are guaranteed to be at least three units long.\r\n\r\n### Numbering snakes\r\n\r\nEach snake on the board is numbered depending on the position of its tail, in the order that the tails appear in the file (going from top-to-bottom, then left-to-right). For example, consider the following board with four snakes:\r\n\r\n```\r\n#############\r\n#  s  d>>D  #\r\n#  v   A<a  #\r\n#  S    W   #\r\n#       ^   #\r\n#       w   #\r\n#############\r\n```\r\n\r\nSnake 0 is the snake with tail `s`, snake 1 has tail `d`, snake 2 has tail `a`, and snake 3 has tail `w`.\r\n\r\nOnce the snakes are numbered from their initial positions, the numbering of the snakes does not change throughout the game.\r\n\r\n### Game board\r\n\r\nA game board is a grid of characters, not necessarily rectangular. Here's an example of a non-rectangular board:\r\n\r\n```\r\n##############\r\n#            #######\r\n#####             ##\r\n#   #             ##\r\n#####             ######\r\n#                 ##   #\r\n#                 ######\r\n#                 ##\r\n#                  #\r\n#      #####       #\r\n########   #########\r\n```\r\n\r\nNote that each row can have a different number of characters, but will start and end with a wall (`#`). You can also assume that the board is an enclosed space, so snakes can't travel infinitely far in any direction.\r\n\r\n### The `game_state_t` struct\r\n\r\nA snake game is stored in memory in a `game_state_t` struct, which is defined in `state.h`. The struct contains the following fields:\r\n\r\n*   `unsigned int num_rows`: The number of rows in the game board.\r\n*   `char** board`: The game board in memory. Each element of the `board` array is a `char*` pointer to a character array containing a row of the board. Each row must be terminated by a new line character and must be a valid string.\r\n*   `unsigned int num_snakes`: The number of snakes on the board.\r\n*   `snake_t* snakes`: An array of `snake_t` structs.\r\n\r\n### The `snake_t` struct\r\n\r\nAlso defined in `state.h`, each `snake_t` struct contains the following fields:\r\n\r\n*   `unsigned int tail_row`: The row of the snake's tail.\r\n*   `unsigned int tail_col`: The column of the snake's tail.\r\n*   `unsigned int head_row`: The row of the snake's head.\r\n*   `unsigned int head_col`: The column of the snake's head.\r\n*   `bool live`: `true` if the snake is alive, and `false` if the snake is dead.\r\n\r\nPlease don't modify the provided struct definitions. You should only need to modify `state.c` `snake.c`, and `custom_tests.c` in this project.\r\n\r\n## Task 1: `create_default_state`\r\n\r\nImplement the `create_default_state` function in `state.c`. This function should create a default snake game in memory with the following starting state (which you can hardcode), and return a pointer to the newly created `game_state_t` struct.\r\n\r\n```\r\n####################\r\n#                  #\r\n# d>D    *         #\r\n#                  #\r\n#                  #\r\n#                  #\r\n#                  #\r\n#                  #\r\n#                  #\r\n#                  #\r\n#                  #\r\n#                  #\r\n#                  #\r\n#                  #\r\n#                  #\r\n#                  #\r\n#                  #\r\n####################\r\n```\r\n\r\n<table><colgroup><col span='1'> <col span='1'> <col span='1'> </colgroup><tbody><tr><td colspan='3'><code>create_default_state</code></td></tr><tr><td><b>Arguments</b></td><td colspan='2'>None</td></tr><tr><td><b>Return values</b></td><td><code>game_state_t *</code></td><td>A pointer to the newly created <code>game_state_t</code> struct.</td></tr></tbody></table>\r\n\r\n### Hints\r\n\r\n*   The board has 18 rows, and each row has 20 columns. The fruit is at row 2, column 9 (zero-indexed). The tail is at row 2, column 2, and the head is at row 2, column 4.\r\n*   Which part of memory (code, static, stack, heap) should you store the new game in?\r\n*   `strcpy` may be helpful.\r\n\r\n\r\n\r\n## Solution\r\n\r\n```c\r\n/* Task 1 */\r\ngame_state_t *create_default_state() {\r\n  unsigned int num_cols = 20;\r\n  game_state_t *state = (game_state_t *)malloc(sizeof(game_state_t));\r\n  state->num_rows = 18;\r\n  state->num_snakes = 1;\r\n\r\n  // init board\r\n  state->board = (char **)calloc(state->num_rows, sizeof(char *));\r\n  for (size_t i = 0; i < state->num_rows; i++) {\r\n    state->board[i] = (char *)calloc(num_cols + 1, sizeof(char));\r\n  }\r\n  // begin an end row\r\n  strcpy(state->board[0], '####################');\r\n  strcpy(state->board[state->num_rows - 1], '####################');\r\n  // main body\r\n  for (unsigned int i = 1; i < state->num_rows - 1; i++) {\r\n    strcpy(state->board[i], '#                  #');\r\n  }\r\n\r\n  // init snake\r\n  state->snakes = (snake_t *)malloc(sizeof(snake_t) * state->num_snakes);\r\n  state->snakes[0].tail_row = 2;\r\n  state->snakes[0].tail_col = 2;\r\n  state->snakes[0].head_row = 2;\r\n  state->snakes[0].head_col = 4;\r\n  state->snakes[0].live = true;\r\n\r\n  // init fruit  \r\n  state->board[2][9] = '*';\r\n\r\n  // render board\r\n  snake_t snake = state->snakes[0];\r\n  state->board[2][2] = 'd';\r\n  state->board[snake.tail_row][snake.tail_col] = 'd';\r\n  state->board[snake.head_row][snake.head_col] = 'D';\r\n  state->board[snake.head_row][snake.head_col - 1] = '>';\r\n  return state;\r\n}\r\n\r\n```\r\n\r\n\r\n\r\n\r\n\r\n## Task 2: `free_state`\r\n\r\nImplement the `free_state` function in `state.c`. This function should free all memory allocated for the given state, including all `snake` structs and all `state`->`board` contents.\r\n\r\n<table><colgroup><col span='1'> <col span='1'> <col span='1'> </colgroup><tbody><tr><td colspan='3'><code>free_state</code></td></tr><tr><td><b>Arguments</b></td><td><code>game_state_t* state</code></td><td>A pointer to the <code>game_state_t</code> struct to be freed</td></tr><tr><td><b>Return values</b></td><td colspan='2'>None</td></tr></tbody></table>\r\n\r\n## Solution\r\n\r\n```c\r\n/* Task 2 */\r\nvoid free_state(game_state_t *state)\r\n{\r\n  for (size_t i = 0; i < state->num_rows; i++) {\r\n    free(state->board[i]);\r\n  }\r\n  free(state->snakes);\r\n  free(state->board);\r\n  free(state);\r\n  return;\r\n}\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n## Task 3: `print_board`\r\n\r\nImplement the `print_board` function in `state.c`. This function should print out the given game board to the given file pointer.\r\n\r\n<table><colgroup><col span='1'> <col span='1'> <col span='1'> </colgroup><tbody><tr><td colspan='3'><code>print_board</code></td></tr><tr><td rowspan='2'><b>Arguments</b></td><td><code>game_state_t* state</code></td><td>A pointer to the <code>game_state_t</code> struct to be printed</td></tr><tr><td><code>FILE* fp</code></td><td>A pointer to the file object where the board should be printed to</td></tr><tr><td><b>Return values</b></td><td colspan='2'>None</td></tr></tbody></table>\r\n\r\n### Hints\r\n\r\n*   The `fprintf` function will help you print out characters and/or strings to a given file pointer.\r\n\r\n## Solution\r\n\r\n```c\r\nvoid print_board(game_state_t *state, FILE *fp)\r\n{\r\n  for (size_t i = 0; i < state->num_rows; i++) {\r\n    fprintf(fp, '%s\\n', state->board[i]);\r\n  }\r\n  return;\r\n}\r\n```\r\n\r\n\r\n\r\n## Task 4: `update_state`\r\n\r\nImplement the `update_state` function in `state.c`. This function should move the snakes one timestep according to the rules of the game.\r\n\r\nHelper functions are not graded; for this task, we'll only be checking that `update_state` is correct.\r\n\r\n### Task 4.1: Helpers\r\n\r\nWe have provided the following helper function definitions that you can implement. These functions are entirely independent of any game board or snake; they only take in a single character and output some information about that character.\r\n\r\n*   `bool is_tail(char c)`: Returns true if `c` is part of the snake's tail. The snake's tail consists of these characters: `wasd`. Returns false otherwise.\r\n*   `bool is_head(char c)`: Returns true if `c` is part of the snake's head. The snake's head consists of these characters: `WASDx`. Returns false otherwise.\r\n*   `bool is_snake(char c)`: Returns true if `c` is part of the snake. The snake consists of these characters: `wasd^<v>WASDx`. Returns false otherwise.\r\n*   `char body_to_tail(char c)`: Converts a character in the snake's body (`^<v>`) to the matching character representing the snake's tail (`wasd`). The output may be undefined for characters that are not a snake's body.\r\n*   `char head_to_body(char c)`: Converts a character in the snake's head (`WASD`) to the matching character representing the snake's body (`^<v>`). The output may be undefined for characters that are not a snake's head.\r\n*   `unsigned int get_next_row(unsigned int cur_row, char c)`: Returns `cur_row + 1` if `c` is `v` or `s` or `S`. Returns `cur_row - 1` if `c` is `^` or `w` or `W`. Returns `cur_row` otherwise.\r\n*   `unsigned int get_next_col(unsigned int cur_col, char c)`: Returns `cur_col + 1` if `c` is `>` or `d` or `D`. Returns `cur_col - 1` if `c` is `<` or `a` or `A`. Returns `cur_col` otherwise.\r\n\r\nUnit tests are not provided for these helper functions, so you'll have to write your own tests in `custom_tests.c` to make sure that these are working as expected. Make sure that these tests comprehensively test your helper functions--our autograder will run your tests on buggy implementations to make sure that your tests can catch bugs!\r\n\r\nWhen writing a unit test, the test function should return `false` if the test fails, and `true` if the test passes. You can use `printf` to print out debugging statements. Some of the assert helper functions in `asserts.h` might be useful.\r\n\r\nOnce you've written your own unit tests, you can run them with `make run-custom-tests` and `make debug-custom-tests`.\r\n\r\n## Solution\r\n\r\n```c\r\nstatic bool is_tail(char c) {\r\n  return c == 'w' || c == 'a' || c == 's' || c == 'd';\r\n}\r\nstatic bool is_head(char c) {\r\n  return c == 'W' || c == 'A' || c == 'S' || c == 'D' || c == 'x';\r\n}\r\nstatic bool is_snake(char c) {\r\n  return is_tail(c) || is_head(c) || c == 'v' || c == '^' || c == '<' || c == '>';\r\n}\r\nstatic char body_to_tail(char ch) {\r\n  switch (ch) {\r\n      case '^':\r\n          ch = 'w';\r\n          break;\r\n      case 'v':\r\n          ch = 's';\r\n          break;\r\n      case '>':\r\n          ch = 'd';\r\n          break;\r\n      case '<':\r\n          ch = 'a';\r\n          break;\r\n      default:\r\n          ch = '?';\r\n          break;\r\n  }\r\n  return ch;\r\n}\r\nstatic char head_to_body(char c) {\r\n  char cb;\r\n  switch (c) {\r\n      case 'W':\r\n        cb = '^';\r\n        break;\r\n      case 'S':\r\n        cb = 'v';\r\n        break;\r\n      case 'A':\r\n        cb = '<';\r\n        break;\r\n      case 'D':\r\n        cb = '>';\r\n        break;\r\n      default:\r\n        cb = '?';\r\n  }\r\n  return cb;\r\n}\r\n\r\nstatic unsigned int get_next_row(unsigned int cur_row, char c) {\r\n  if (c == 'v' || c == 's' || c == 'S') {\r\n    cur_row += 1;\r\n  }\r\n  else if (c == '^' || c == 'w' || c == 'W') {\r\n    cur_row -= 1;\r\n  }\r\n  return cur_row;\r\n}\r\n\r\nstatic unsigned int get_next_col(unsigned int cur_col, char c) {\r\n  if (c == '>' || c == 'd' || c == 'D') {\r\n    cur_col += 1;\r\n  }\r\n  else if (c == '<' || c == 'a' || c == 'A') {\r\n    cur_col -= 1;\r\n  }\r\n  return cur_col;\r\n}\r\n```\r\n\r\n\r\n\r\n### Task 4.2: `next_square`\r\n\r\nImplement the `next_square` helper function in `state.c`. This function returns the character in the cell the given snake is moving into. This function should not modify anything in the game stored in memory.\r\n\r\n<table><colgroup><col span='1'> <col span='1'> <col span='1'> </colgroup><tbody><tr><td colspan='3'><code>next_square</code></td></tr><tr><td rowspan='2'><b>Arguments</b></td><td><code>game_state_t* state</code></td><td>A pointer to the <code>game_state_t</code> struct to be analyzed</td></tr><tr><td><code>int snum</code></td><td>The index of the snake to be analyzed</td></tr><tr><td><b>Return values</b></td><td><code>char</code></td><td>The character in the cell the given snake is moving into</td></tr></tbody></table>\r\n\r\nAs an example, consider the following board:\r\n\r\n```\r\n##############\r\n#            #\r\n#            #\r\n#            #\r\n#   d>D*     #\r\n#            #\r\n#       s    #\r\n#       v    #\r\n#       S    #\r\n##############\r\n```\r\n\r\nAssuming that `state` is a pointer to this game state, then `next_square(state, 0)` should return `*`, because the head of snake 0 is moving into a cell with `*` in it. Similarly, `next_square(state, 1)` should return `#` for snake 1.\r\n\r\nThe helper functions you wrote earlier might be helpful for this function (and the rest of this task too). Also, check out `get_board_at` and `set_board_at`, which are helper functions we wrote for you.\r\n\r\nUse `make run-unit-tests` and `make debug-unit-tests` to run the provided unit tests. You can also use `p print_board(state, stdout)` to print out your entire board while debugging in `cgdb`.\r\n\r\n\r\n\r\n## Solution\r\n\r\n```c\r\nstatic char next_square(game_state_t *state, unsigned int snum) {\r\n  snake_t snake = state->snakes[snum];\r\n  char head_char = state->board[snake.head_row][snake.head_col];\r\n  unsigned int next_col = get_next_col(snake.head_col, head_char);\r\n  unsigned int next_row = get_next_row(snake.head_row, head_char);\r\n  return get_board_at(state, next_row, next_col);\r\n}\r\n```\r\n\r\n\r\n\r\n### Task 4.3: `update_head`\r\n\r\nImplement the `update_head` function in `state.c`. This function will update the head of the snake.\r\n\r\nRemember that you will need to update the head both on the game board and in the `snake_t` struct. On the game board, add a character where the snake is moving. In the `snake_t` struct, update the row and column of the head.\r\n\r\n<table><colgroup><col span='1'> <col span='1'> <col span='1'> </colgroup><tbody><tr><td colspan='3'><code>update_head</code></td></tr><tr><td rowspan='2'><b>Arguments</b></td><td><code>game_state_t* state</code></td><td>A pointer to the <code>game_state_t</code> struct to be updated</td></tr><tr><td><code>int snum</code></td><td>The index of the snake to be updated</td></tr><tr><td><b>Return values</b></td><td colspan='2'>None</td></tr></tbody></table>\r\n\r\nAs an example, consider the following board:\r\n\r\n```\r\n##############\r\n#   d>D      #\r\n#        *   #\r\n#        W   #\r\n#        ^   #\r\n#        ^   #\r\n#        w   #\r\n#            #\r\n#            #\r\n##############\r\n\r\n\r\n```\r\n\r\nAssuming that `state` is a pointer to this game state, then `update_head(state, 0)` will move the head of snake 0, leaving all other snakes unchanged. In the `snake_t` struct corresponding to snake 0, the `head_col` value should be updated from 6 to 7, and the `head_row` value should stay unchanged at 1. The new board will look like this:\r\n\r\n```\r\n##############\r\n#   d>>D     #\r\n#        *   #\r\n#        W   #\r\n#        ^   #\r\n#        ^   #\r\n#        w   #\r\n#            #\r\n#            #\r\n##############\r\n\r\n\r\n```\r\n\r\nNote that this function ignores food, walls, and snake bodies when moving the head.\r\n\r\n## Solution\r\n\r\n```c\r\nstatic void update_head(game_state_t *state, unsigned int snum) {\r\n  snake_t *snake = (state->snakes) + snum;\r\n  unsigned int cur_row = snake->head_row;\r\n  unsigned int cur_col = snake->head_col;\r\n  char cur_char = state->board[cur_row][cur_col];\r\n  unsigned int next_row = get_next_row(cur_row, cur_char);\r\n  unsigned int next_col = get_next_col(cur_col, cur_char);\r\n  set_board_at(state, next_row, next_col, cur_char);\r\n  set_board_at(state, cur_row, cur_col, head_to_body(cur_char));\r\n  snake->head_row = next_row;\r\n  snake->head_col = next_col;\r\n  return;\r\n}\r\n```\r\n\r\n\r\n\r\n### Task 4.4: `update_tail`\r\n\r\nImplement the `update_tail` function in `state.c`. This function will update the tail of the snake.\r\n\r\nRemember that you will need to update the tail both on the game board and in the `snake_t` struct. On the game board, blank out the current tail, and change the new tail from a body character (`^<v>`) into a tail character (`wasd`). In the `snake_t` struct, update the row and column of the tail.\r\n\r\n<table><colgroup><col span='1'> <col span='1'> <col span='1'> </colgroup><tbody><tr><td colspan='3'><code>update_tail</code></td></tr><tr><td rowspan='2'><b>Arguments</b></td><td><code>game_state_t* state</code></td><td>A pointer to the <code>game_state_t</code> struct to be updated</td></tr><tr><td><code>int snum</code></td><td>The index of the snake to be updated</td></tr><tr><td><b>Return values</b></td><td colspan='2'>None</td></tr></tbody></table>\r\n\r\nAs an example, consider the following board:\r\n\r\n```\r\n##############\r\n#   d>D      #\r\n#        *   #\r\n#        W   #\r\n#        ^   #\r\n#        ^   #\r\n#        w   #\r\n#            #\r\n#            #\r\n##############\r\n```\r\n\r\nAssuming that `state` is a pointer to this game state, then `update_tail(state, 1)` will move the tail of snake 1, leaving all other snakes unchanged. In the `snake_t` struct corresponding to snake 1, the `tail_row` value should be updated from 6 to 5, and the `tail_col` value should stay unchanged at 9. The new board will look like this:\r\n\r\n```\r\n##############\r\n#   d>D      #\r\n#        *   #\r\n#        W   #\r\n#        ^   #\r\n#        w   #\r\n#            #\r\n#            #\r\n#            #\r\n##############\r\n```\r\n\r\n## Solution\r\n\r\n```c\r\nstatic void update_tail(game_state_t *state, unsigned int snum) {\r\n  snake_t *snake_ptr = &state->snakes[snum];\r\n  char tail_char = state->board[snake_ptr->tail_row][snake_ptr->tail_col];\r\n  unsigned int next_row = get_next_row(snake_ptr->tail_row, tail_char);\r\n  unsigned int next_col = get_next_col(snake_ptr->tail_col, tail_char);\r\n  set_board_at(state, snake_ptr->tail_row, snake_ptr->tail_col, ' ');\r\n  set_board_at(state, next_row, next_col, body_to_tail(state->board[next_row][next_col]));\r\n  snake_ptr->tail_row = next_row;\r\n  snake_ptr->tail_col = next_col;\r\n  return;\r\n}\r\n```\r\n\r\n\r\n\r\n### Task 4.5: `update_state`\r\n\r\nUsing the helpers you created, implement `update_state` in `state.c`.\r\n\r\nAs a reminder, the rules for moving a snake are as follows:\r\n\r\n*   Each snake moves one step in the direction of its head.\r\n*   If the head crashes into the body of a snake or a wall, the snake dies and stops moving. When a snake dies, the head is replaced with an `x`.\r\n*   If the head moves into a fruit, the snake eats the fruit and grows by 1 unit in length. (You can implement growing by 1 unit by updating the head without updating the tail.) Each time fruit is consumed, a new fruit is generated on the board.\r\n\r\nThe `int (*add_food)(game_state_t* state)` argument is a function pointer, which means that `add_food` is a pointer to the code section of memory. The code that `add_food` is pointing at is a function that takes in `game_state_t* state` as an argument and returns an `int`. You can call this function with `add_food(x)`, replacing `x` with your argument, to add a fruit to the board.\r\n\r\n<table><colgroup><col span='1'> <col span='1'> <col span='1'> </colgroup><tbody><tr><td colspan='3'><code>update_state</code></td></tr><tr><td rowspan='2'><b>Arguments</b></td><td><code>game_state_t* state</code></td><td>A pointer to the <code>game_state_t</code> struct to be updated</td></tr><tr><td><code>int (*add_food)(game_state_t* state)</code></td><td>A pointer to a function that will add fruit to the board</td></tr><tr><td><b>Return values</b></td><td colspan='2'>None</td></tr></tbody></table>\r\n\r\n## Solution\r\n\r\n```c\r\nvoid update_state(game_state_t *state, int (*add_food)(game_state_t *state))\r\n{\r\n  for (unsigned int i = 0; i < state->num_snakes; i++)\r\n  {\r\n    snake_t *snake_ptr = state->snakes + i;\r\n    char head_char = get_board_at(state, snake_ptr->head_row, snake_ptr->head_col);\r\n    unsigned int next_row = get_next_row(snake_ptr->head_row, head_char);\r\n    unsigned int next_col = get_next_col(snake_ptr->head_col, head_char);\r\n    char next_char = get_board_at(state, next_row, next_col);\r\n    if (is_snake(next_char) || next_char == '#') {\r\n      snake_ptr->live = false;\r\n      set_board_at(state, snake_ptr->head_row, snake_ptr->head_col, 'x');\r\n    } else if (next_char == '*') {\r\n      update_head(state, i);\r\n      add_food(state);\r\n    } else {\r\n      update_head(state, i);\r\n      update_tail(state, i);\r\n    }\r\n  }\r\n  return;\r\n}\r\n```\r\n\r\n\r\n\r\n\r\n\r\n## Task 5: `load_board`\r\n\r\nImplement the `load_board` function in `state.c`. This function will read a game board from a stream (`FILE *`) into memory. Your implementation of `load_board` must support reading in from `stdin` and any other streams, so please do not use anything that does not support `stdin`, such as seeking, rewinding, or reopening.\r\n\r\nRemember that each row of the game board might have a different number of columns. Your implementation should be memory-efficient and should not allocate significantly more memory than necessary to store the board. For example, if a row is 3 characters long, you shouldn't be allocating 100 bytes of space for that row.\r\n\r\nYou must use `fgets` to read from the file pointer. We reserve the ability to manually regrade your submission if it uses a function other than `fgets` to read from `file`. Other string functions, such as `strchr`, may be helpful here as well!\r\n\r\nHint: `realloc` may be helpful for this task.\r\n\r\nTasks 5 and 6 combined will create a `game_state_t` struct in memory with all its fields set up. In this task, please set `num_snakes` to 0 and set the `snakes` array to `NULL`, since these will be initialized in task 6.\r\n\r\n### Task 5.1: `read_line`\r\n\r\nImplement the `read_line` function in `state.c`. Given a `FILE *` `file`, read a line from `file` and store the string on the heap. If `fgets` errors, return `NULL`.\r\n\r\n<table><colgroup><col span='1'> <col span='1'> <col span='1'> </colgroup><tbody><tr><td colspan='3'><code>read_line</code></td></tr><tr><td><b>Arguments</b></td><td><code>FILE* file</code></td><td>A file pointer where the string can be read from</td></tr><tr><td><b>Return values</b></td><td><code>char *</code></td><td>A pointer to the newly read string. <code>NULL</code> if there are any errors, or if <code>EOF</code> is reached.</td></tr></tbody></table>\r\n\r\n## Solution\r\n\r\n```c\r\nchar *read_line(FILE *fp) {\r\n  char *str = (char *) malloc(sizeof(char) * 255);\r\n  if (fgets(str, 255, fp) == NULL) {\r\n    return NULL;\r\n  }\r\n  while (str[strlen(str) - 1] != '\\n') {\r\n    str = realloc(str, sizeof(char) * strlen(str) * 2);\r\n    fgets(str + strlen(str), 255, fp);\r\n  }\r\n  str = realloc(str, sizeof(char) * (strlen(str) + 1));\r\n  return str;\r\n}\r\n```\r\n\r\n\r\n\r\n### Task 5.2: `load_board`\r\n\r\nUsing `read_line`, implement the `load_board` function in `state.c`.\r\n\r\n<table><colgroup><col span='1'> <col span='1'> <col span='1'> </colgroup><tbody><tr><td colspan='3'><code>load_board</code></td></tr><tr><td><b>Arguments</b></td><td><code>FILE* file</code></td><td>A file pointer where the board can be read from</td></tr><tr><td><b>Return values</b></td><td><code>game_state_t *</code></td><td>A pointer to the newly created <code>game_state_t</code> struct. <code>NULL</code> if there are any errors.</td></tr></tbody></table>\r\n\r\n## Solution\r\n\r\n```c\r\ngame_state_t *load_board(FILE *fp) {\r\n  unsigned int capacity = 255;\r\n  game_state_t* state = (game_state_t *) malloc(sizeof(game_state_t));\r\n  state->num_snakes = 0;\r\n  state->snakes = NULL;\r\n  state->num_rows = 0;\r\n  state->board = (char **)calloc(capacity, sizeof(char *));\r\n  char* str;\r\n  while ((str = read_line(fp)) != NULL) {\r\n    if (str[strlen(str) - 1] == '\\n') {\r\n      str[strlen(str) - 1] = '\\0';\r\n    }\r\n    state->board[(state->num_rows)++] = str;\r\n    if (state->num_rows >= capacity) {\r\n      capacity *= 2;\r\n      state->board = (char **) realloc(state->board, sizeof(char *) * capacity);\r\n    }\r\n  }\r\n  state->board = (char **) realloc(state->board, sizeof(char *) * state->num_rows);\r\n  return state;\r\n}\r\n```\r\n\r\n\r\n\r\n## Task 6: `initialize_snake`\r\n\r\nImplement the `initialize_snake` function in `state.c`. This function takes in a game board and creates the array of `snake_t` structs.\r\n\r\n### Task 6.1: `find_head`\r\n\r\nImplement the `find_head` function in `state.c`. Given a `snake_t` struct with the tail row and column filled in, this function traces through the board to find the head row and column, and fills in the head row and column in the struct.\r\n\r\n<table><colgroup><col span='1'> <col span='1'> <col span='1'> </colgroup><tbody><tr><td colspan='3'><code>find_head</code></td></tr><tr><td rowspan='2'><b>Arguments</b></td><td><code>game_state_t* state</code></td><td>A pointer to the <code>game_state_t</code> struct to be analyzed</td></tr><tr><td><code>int snum</code></td><td>The index of the snake to be analyzed</td></tr><tr><td><b>Return values</b></td><td colspan='2'>None</td></tr></tbody></table>\r\n\r\nAs an example, consider the following board:\r\n\r\n```\r\n##############\r\n#            #\r\n#        *   #\r\n#            #\r\n#   d>v      #\r\n#     v      #\r\n#  W  v      #\r\n#  ^<<<      #\r\n#            #\r\n##############\r\n\r\n\r\n```\r\n\r\nAssuming that `state` is a pointer to this game state, then `find_head(state, 0)` will fill in the `head_row` and `head_col` fields of the snake 0 struct with 6 and 3, respectively.\r\n\r\n## Solution\r\n\r\n```c\r\nstatic void find_head(game_state_t *state, unsigned int snum) {\r\n  snake_t * snake_ptr = (state->snakes) + snum;\r\n  unsigned int row = snake_ptr->tail_row;\r\n  unsigned int col = snake_ptr->tail_col;\r\n  char ch = state->board[row][col];\r\n  while (is_snake(ch) && !is_head(ch)) {\r\n    row = get_next_row(row, ch);\r\n    col = get_next_col(col, ch);\r\n    ch = state->board[row][col];\r\n  }\r\n  snake_ptr->head_row = row;\r\n  snake_ptr->head_col = col;\r\n  return;\r\n}\r\n```\r\n\r\n\r\n\r\n### Task 6.2: `initialize_snake`\r\n\r\nUsing `find_head`, implement the `initialize_snake` function in `state.c`. You can assume that the state passed into this function is the result of calling `load_board`, but you may not assume that the `snakes` array is defined. This means the board-related fields are already filled in, and you only need to fill in `num_snakes` and create the `snakes` array.\r\n\r\nYou may assume that all snakes on the board start out alive.\r\n\r\n<table><colgroup><col span='1'> <col span='1'> <col span='1'> </colgroup><tbody><tr><td colspan='3'><code>initialize_snakes</code></td></tr><tr><td><b>Arguments</b></td><td><code>game_state_t* state</code></td><td>A pointer to the <code>game_state_t</code> struct to be filled in</td></tr><tr><td><b>Return values</b></td><td><code>game_state_t* state</code></td><td>A pointer to the <code>game_state_t</code> struct with fields filled in. This can be the same as the struct passed in (you can modify the struct in-place).</td></tr></tbody></table>\r\n\r\n## Solution\r\n\r\n```c\r\ngame_state_t *initialize_snakes(game_state_t *state) {\r\n  state->snakes = (snake_t *)malloc(sizeof(snake_t) * 512);\r\n  state->num_snakes = 0;\r\n  for (unsigned int i = 0; i < state->num_rows; i++)\r\n  {\r\n    char* row = state->board[i];\r\n\r\n    for (unsigned int j = 0; j < strlen(row); j++)\r\n    {\r\n      \r\n      char ch = row[j];\r\n      if (is_tail(ch)) {\r\n        snake_t* snake = state->snakes + (state->num_snakes);\r\n        snake->live = true;\r\n        snake->tail_row = i;\r\n        snake->tail_col = j;\r\n        state->num_snakes += 1;\r\n      }\r\n    }\r\n  }\r\n  for (unsigned int i = 0; i < state->num_snakes; i++) {\r\n    find_head(state, i);\r\n  }\r\n  print_board(state, stdout);\r\n  return state;\r\n}\r\n```\r\n\r\n\r\n\r\n## Task 7: `main`\r\n\r\nUsing the functions you implemented in all the previous tasks, fill in the blanks in `snake.c`. Each time the `snake.c` program is run, the board will be updated by one time step.\r\n\r\n## Solution\r\n\r\n```c\r\nint main(int argc, char *argv[]) {\r\n  bool io_stdin = false;\r\n  char *in_filename = NULL;\r\n  char *out_filename = NULL;\r\n  game_state_t *state = NULL;\r\n\r\n  for (int i = 1; i < argc; i++) {\r\n    if (strcmp(argv[i], '-i') == 0 && i < argc - 1) {\r\n      if (io_stdin) {\r\n        fprintf(stderr, 'Usage: %s [-i filename | --stdin] [-o filename]\\n', argv[0]);\r\n        return 1;\r\n      }\r\n      in_filename = argv[i + 1];\r\n      i++;\r\n      continue;\r\n    } else if (strcmp(argv[i], '--stdin') == 0) {\r\n      if (in_filename != NULL) {\r\n        fprintf(stderr, 'Usage: %s [-i filename | --stdin] [-o filename]\\n', argv[0]);\r\n        return 1;\r\n      }\r\n      io_stdin = true;\r\n      continue;\r\n    }\r\n    if (strcmp(argv[i], '-o') == 0 && i < argc - 1) {\r\n      out_filename = argv[i + 1];\r\n      i++;\r\n      continue;\r\n    }\r\n    fprintf(stderr, 'Usage: %s [-i filename | --stdin] [-o filename]\\n', argv[0]);\r\n    return 1;\r\n  }\r\n\r\n  if (in_filename != NULL) {\r\n    FILE * fp = fopen(in_filename, 'r');\r\n    if (fp == NULL) {\r\n      return -1;\r\n    }\r\n    state = load_board(fp);\r\n    initialize_snakes(state);\r\n  } else if (io_stdin) {\r\n    state = load_board(stdin);\r\n    initialize_snakes(state);\r\n  } else {\r\n    create_default_state();\r\n  }\r\n  update_state(state, deterministic_food);\r\n  if (out_filename != NULL) {\r\n    FILE *fp = fopen(out_filename, 'w+');\r\n    print_board(state, fp);\r\n  } else {\r\n    print_board(state, stdout);\r\n  }\r\n  free_state(state);\r\n  return 0;\r\n}\r\n```\r\n\r\n\u3002", "top": 0, "createdAt": 1723540705, "style": "", "script": "", "head": "", "ogImage": "https://img.icons8.com/doodle/480/mugman.png", "createdDate": "2024-08-13", "dateLabelColor": "#bc4c00"}}, "singeListJson": {}, "labelColorDict": {"cmu15-213": "#C0858E", "cs61a": "#1D3AD1", "cs61c": "#6C1C8A", "csapp": "#1d76db", "database": "#33EBC2", "hw": "#B60205", "lab": "#FBCA04", "lecture": "#D33B1C", "mysql": "#FC0661", "project": "#d876e3"}, "displayTitle": "Lizi", "faviconUrl": "https://img.icons8.com/doodle/480/mugman.png", "ogImage": "https://img.icons8.com/doodle/480/mugman.png", "primerCSS": "<link href='https://mirrors.sustech.edu.cn/cdnjs/ajax/libs/Primer/21.0.7/primer.css' rel='stylesheet' />", "homeUrl": "https://LianSeKong.github.io/lizi", "prevUrl": "disabled", "nextUrl": "disabled"}