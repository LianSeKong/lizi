{"singlePage": ["about"], "startSite": "", "filingNum": "", "onePageListNum": 15, "commentLabelColor": "#006b75", "yearColorList": ["#bc4c00", "#0969da", "#1f883d", "#A333D0"], "i18n": "CN", "themeMode": "manual", "dayTheme": "light", "nightTheme": "dark", "urlMode": "pinyin", "script": "", "style": "", "head": "", "indexScript": "", "indexStyle": "", "bottomText": "\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904", "showPostSource": 1, "iconList": {}, "UTC": 8, "rssSplit": "sentence", "exlink": {}, "needComment": 1, "allHead": "", "title": "Lizi", "subTitle": "\u5373\u662f\u4ee3\u7801\u4e5f\u662f\u751f\u6d3b\uff01", "avatarUrl": "https://img.icons8.com/doodle/480/mugman.png", "GMEEK_VERSION": "last", "postListJson": {"P1": {"htmlDir": "docs/post/ProxyLab.html", "labels": ["csapp", "cmu15-213", "lab"], "postTitle": "ProxyLab", "postUrl": "post/ProxyLab.html", "postSourceUrl": "https://github.com/LianSeKong/lizi/issues/1", "commentNum": 0, "wordCount": 961, "description": "\r\n> \u4f7f\u7528\u4fe1\u53f7\u91cf\u534f\u8c03\u5bf9\u5171\u4eab\u8d44\u6e90\u7684\u8bbf\u95ee\r\n> Using Semaphores to Coordinate Access to Shared Resources\r\n\r\n1. \u57fa\u672c\u601d\u60f3\uff1a\u7ebf\u7a0b\u4f7f\u7528\u4fe1\u53f7\u91cf\u64cd\u4f5c\u6765\u901a\u77e5\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u67d0\u4e2a\u6761\u4ef6\u5df2\u53d8\u4e3a\u771f\r\n2. Basic idea: Thread uses a semaphore operation to notify another thread that some condition has become true\r\n3. \u4f7f\u7528\u8ba1\u6570\u4fe1\u53f7\u91cf\u6765\u8ddf\u8e2a\u8d44\u6e90\u72b6\u6001\u5e76\u901a\u77e5\u5176\u4ed6\u7ebf\u7a0b\r\n4. Use counting semaphores to keep track of resource state and to notify other threads\r\n5. \u4f7f\u7528\u4e92\u65a5\u9501\u6765\u4fdd\u62a4\u5bf9\u8d44\u6e90\u7684\u8bbf\u95ee\r\n6. Use mutex to protect access to resource\r\n\r\n> \u4e24\u79cd\u5178\u578b\u4f8b\u5b50\r\n\r\n1. The Producer-\u00adConsumer Problem \r\n2. The Readers-\u00adWriters Problem\r\n\r\n## The Producer\u00ad\u2010Consumer\r\n\r\n[[25-sync-advanced.pdf#page=4&selection=0,15,10,26|25-sync-advanced, \u9875\u9762 4]]\r\n\r\n## The Readers-\u00adWriters Problem\r\n\r\n[[25-sync-advanced.pdf#page=11&selection=0,15,8,25|25-sync-advanced, \u9875\u9762 11]]\r\n\r\n## \u7ebf\u7a0b\u5b89\u5168\u51fd\u6570\r\n\r\n> \u5982\u679c\u4e00\u4e2a\u51fd\u6570\u5728\u88ab\u591a\u4e2a\u5e76\u53d1\u7ebf\u7a0b\u91cd\u590d\u8c03\u7528\u65f6\u603b\u80fd\u4ea7\u751f\u6b63\u786e\u7684\u7ed3\u679c\uff0c\u90a3\u4e48\u5b83\u5c31\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\r\n\r\n## \u7ebf\u7a0b\u4e0d\u5b89\u5168\u51fd\u6570\r\n\r\n1. \u4f7f\u7528\u4e0d\u5b89\u5168\u7684\u51fd\u6570\r\n2. \u51fd\u6570\u8fd4\u56de\u9759\u6001\u6307\u9488\u53d8\u91cf     \r\n3. \u51fd\u6570\u4e0d\u4fdd\u62a4\u5171\u4eab\u53d8\u91cf\u7684\u8bbf\u95ee\r\n4. \u51fd\u6570\u7ef4\u6301\u72b6\u6001\u901a\u8fc7\u591a\u6b21\u8c03\u7528 \uff08\u64cd\u4f5c\u9759\u6001\u53d8\u91cf\uff09\r\n\r\n## reentrant \r\n\r\n> \u53ef\u91cd\u5165\u51fd\u6570\uff1a \u5c5e\u4e8e\u7ebf\u7a0b\u5b89\u5168\u51fd\u6570\uff0c\u4e0d\u9700\u8981\u540c\u6b65\u64cd\u4f5c\uff0c\u4e0d\u8bbf\u95ee\u5171\u4eab\u53d8\u91cf\u3002", "top": 0, "createdAt": 1721200658, "style": "", "script": "", "head": "", "ogImage": "https://img.icons8.com/doodle/480/mugman.png", "createdDate": "2024-07-17", "dateLabelColor": "#bc4c00"}, "P2": {"htmlDir": "docs/post/cs61a-su24-hw01.html", "labels": ["cs61a", "hw"], "postTitle": "cs61a-su24-hw01", "postUrl": "post/cs61a-su24-hw01.html", "postSourceUrl": "https://github.com/LianSeKong/lizi/issues/2", "commentNum": 0, "wordCount": 9590, "description": "---\r\nurl: https://cs61a.org/hw/hw01/\r\ntitle: Homework 1 \r\ndate: 2024-07-17 16:08:34\r\ntag: \r\nbanner: 'https://images.unsplash.com/photo-1719749937847-ab76d3e0dbb7?crop=entropy&cs=srgb&fm=jpg&ixid=M3w0Njc1ODd8MHwxfHJhbmRvbXx8fHx8fHwxfHwxNzIxMjAzNjE1fA&ixlib=rb-4.0.3&q=85&fit=crop&w=624&max-h=540'\r\nbanner_icon: \ud83d\udd16\r\n---\r\nsr-annote { all: unset; }\r\n\r\n_Due by 11:59pm on Wednesday, June 26  \r\n\u622a\u6b62\u65e5\u671f\u4e3a 6 \u6708 26 \u65e5\u661f\u671f\u4e09\u665a\u4e0a 11\uff1a59_\r\n\r\n## Instructions \u6307\u793a\r\n\r\nDownload [hw01.zip](https://cs61a.org/hw/hw01/hw01.zip). \u4e0b\u8f7dhw01.zip\u3002", "top": 0, "createdAt": 1721205134, "style": "", "script": "", "head": "", "ogImage": "https://img.icons8.com/doodle/480/mugman.png", "createdDate": "2024-07-17", "dateLabelColor": "#bc4c00"}, "P3": {"htmlDir": "docs/post/cs61a-su24-hw02.html", "labels": ["cs61a", "hw"], "postTitle": "cs61a-su24-hw02", "postUrl": "post/cs61a-su24-hw02.html", "postSourceUrl": "https://github.com/LianSeKong/lizi/issues/3", "commentNum": 0, "wordCount": 14725, "description": "## Instructions\r\n\r\nDownload [hw02.zip](https://cs61a.org/hw/hw02/hw02.zip). Inside the archive, you will find a file called [hw02.py](https://cs61a.org/hw/hw02/hw02.py), along with a copy of the `ok` autograder.\r\n\r\n**Submission:** When you are done, submit the assignment by uploading all code files you've edited to Gradescope. You may submit more than once before the deadline; only the final submission will be scored. Check that you have successfully submitted your code on Gradescope. See [Lab 0](https://cs61a.org/lab/lab00#task-c-submitting-the-assignment) for more instructions on submitting assignments.\r\n\r\n**Using Ok:** If you have any questions about using Ok, please refer to [this guide.](https://cs61a.org/articles/using-ok)\r\n\r\n**Readings:** You might find the following references useful:\r\n\r\n*   [Section 1.6](https://www.composingprograms.com/pages/16-higher-order-functions.html)\r\n*   [Section 1.7](https://www.composingprograms.com/pages/17-recursive-functions.html)\r\n\r\n**Grading:** Homework is graded based on correctness. Each incorrect problem will decrease the total score by one point. **This homework is out of 2 points.**\r\n\r\nSeveral doctests refer to these functions:\r\n\r\n```\r\nfrom operator import add, mul\r\n\r\nsquare = lambda x: x * x\r\n\r\nidentity = lambda x: x\r\n\r\ntriple = lambda x: 3 * x\r\n\r\nincrement = lambda x: x + 1\r\n\r\n```\r\n\r\n## Higher-Order Functions\r\n\r\n### Q1: Product\r\n\r\nWrite a function called `product` that returns the product of the first `n` terms of a sequence. Specifically, `product` takes in an integer `n` and `term`, a single-argument function that determines a sequence. (That is, `term(i)` gives the `i`th term of the sequence.) `product(n, term)` should return `term(1) * ... * term(n)`.\r\n\r\n```\r\ndef product(n, term):\r\n    '''Return the product of the first n terms in a sequence.\r\n\r\n    n: a positive integer\r\n    term:  a function that takes one argument to produce the term\r\n\r\n    >>> product(3, identity)  # 1 * 2 * 3\r\n    6\r\n    >>> product(5, identity)  # 1 * 2 * 3 * 4 * 5\r\n    120\r\n    >>> product(3, square)    # 1^2 * 2^2 * 3^2\r\n    36\r\n    >>> product(5, square)    # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\r\n    14400\r\n    >>> product(3, increment) # (1+1) * (2+1) * (3+1)\r\n    24\r\n    >>> product(3, triple)    # 1*3 * 2*3 * 3*3\r\n    162\r\n    '''\r\n    '*** YOUR CODE HERE ***'\r\n\r\n\r\n```\r\n\r\nUse Ok to test your code:\r\n\r\n```\r\npython3 ok -q product\r\n\r\n```\r\n\r\n:bear: <u>\u6bd4\u8f83\u7b80\u5355\uff0c\u5c31\u4e0d\u89e3\u91ca\u4e86</u>\r\n\r\n```python\r\ndef product(n, term):\r\n    i, count = 1, 1\r\n    while i <= n:\r\n        count, i = mul(count, term(i)), add(i, 1)\r\n    return count\r\n```\r\n\r\n### Q2: Accumulate\r\n\r\nLet's take a look at how `product` is an instance of a more general function called `accumulate`, which we would like to implement:\r\n\r\n```\r\ndef accumulate(fuse, start, n, term):\r\n    '''Return the result of fusing together the first n terms in a sequence \r\n    and start.  The terms to be fused are term(1), term(2), ..., term(n). \r\n    The function fuse is a two-argument commutative & associative function.\r\n\r\n    >>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\r\n    15\r\n    >>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\r\n    26\r\n    >>> accumulate(add, 11, 0, identity) # 11 (fuse is never used)\r\n    11\r\n    >>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2\r\n    25\r\n    >>> accumulate(mul, 2, 3, square)    # 2 * 1^2 * 2^2 * 3^2\r\n    72\r\n    >>> # 2 + (1^2 + 1) + (2^2 + 1) + (3^2 + 1)\r\n    >>> accumulate(lambda x, y: x + y + 1, 2, 3, square)\r\n    19\r\n    '''\r\n    '*** YOUR CODE HERE ***'\r\n\r\n\r\n```\r\n\r\n`accumulate` has the following parameters:\r\n\r\n*   `fuse`: a two-argument function that specifies how the current term is fused with the previously accumulated terms\r\n*   `start`: value at which to start the accumulation\r\n*   `n`: a non-negative integer indicating the number of terms to fuse\r\n*   `term`: a single-argument function; `term(i)` is the `i`th term of the sequence\r\n\r\nImplement `accumulate`, which fuses the first `n` terms of the sequence defined by `term` with the `start` value using the `fuse` function.\r\n\r\nFor example, the result of `accumulate(add, 11, 3, square)` is\r\n\r\n```\r\nadd(11,  add(square(1), add(square(2),  square(3)))) =\r\n    11 +     square(1) +    square(2) + square(3)    =\r\n    11 +     1         +    4         + 9            = 25\r\n\r\n```\r\n\r\nAssume that `fuse` is commutative, `fuse(a, b) == fuse(b, a)`, and associative, `fuse(fuse(a, b), c) == fuse(a, fuse(b, c))`.\r\n\r\nThen, implement `summation` (from lecture) and `product` as one-line calls to `accumulate`.\r\n\r\n**Important:** Both `summation_using_accumulate` and `product_using_accumulate` should be implemented with a single line of code starting with `return`.\r\n\r\n```\r\ndef summation_using_accumulate(n, term):\r\n    '''Returns the sum: term(1) + ... + term(n), using accumulate.\r\n\r\n    >>> summation_using_accumulate(5, square) # square(0) + square(1) + ... + square(4) + square(5)\r\n    55\r\n    >>> summation_using_accumulate(5, triple) # triple(0) + triple(1) + ... + triple(4) + triple(5)\r\n    45\r\n    >>> # This test checks that the body of the function is just a return statement.\r\n    >>> import inspect, ast\r\n    >>> [type(x).__name__ for x in ast.parse(inspect.getsource(summation_using_accumulate)).body[0].body]\r\n    ['Expr', 'Return']\r\n    '''\r\n    return ____\r\n\r\ndef product_using_accumulate(n, term):\r\n    '''Returns the product: term(1) * ... * term(n), using accumulate.\r\n\r\n    >>> product_using_accumulate(4, square) # square(1) * square(2) * square(3) * square()\r\n    576\r\n    >>> product_using_accumulate(6, triple) # triple(1) * triple(2) * ... * triple(5) * triple(6)\r\n    524880\r\n    >>> # This test checks that the body of the function is just a return statement.\r\n    >>> import inspect, ast\r\n    >>> [type(x).__name__ for x in ast.parse(inspect.getsource(product_using_accumulate)).body[0].body]\r\n    ['Expr', 'Return']\r\n    '''\r\n    return ____\r\n\r\n\r\n```\r\n\r\nUse Ok to test your code:\r\n\r\n```\r\npython3 ok -q accumulate\r\npython3 ok -q summation_using_accumulate\r\npython3 ok -q product_using_accumulate\r\n\r\n```\r\n\r\n:bear: `accumulate\uff1a \u5bf9product\u7684\u6bcf\u6b21\u76f8\u4e58\u884c\u4e3a\u66ff\u6362\u4e3a\u62bd\u8c61\u7684\u51fd\u6570`\r\n\r\n```python\r\ndef accumulate(fuse, start, n, term):\r\n    i, count = 1, start\r\n    while i <= n:\r\n        start, i = merger(fuse, term(i)), add(i + 1)\r\n    return count\r\n```\r\n\r\n:bear: `summation_using_accumulate: product\u7684\u53d8\u4f53`\r\n\r\n```python\r\ndef summation_using_accumulate(n, term):\r\n    return accumulate(add, term(0), n, term)\r\n```\r\n\r\n:bear: `sproduct_using_accumulate: product\u7684\u53d8\u4f53`\r\n\r\n```python\r\ndef product_using_accumulate(n, term):\r\n \treturn accumulate(mul, 1, n, term)\r\n```\r\n\r\n\r\n\r\n### Q3: Make Repeater\r\n\r\nImplement the function `make_repeater` which takes a one-argument function `f` and a positive integer `n`. It returns a one-argument function, where `make_repeater(f, n)(x)` returns the value of `f(f(...f(x)...))` in which `f` is applied `n` times to `x`. For example, `make_repeater(square, 3)(5)` squares 5 three times and returns 390625, just like `square(square(square(5)))`.\r\n\r\n```\r\ndef make_repeater(f, n):\r\n    '''Returns the function that computes the nth application of f.\r\n\r\n    >>> add_three = make_repeater(increment, 3)\r\n    >>> add_three(5)\r\n    8\r\n    >>> make_repeater(triple, 5)(1) # 3 * (3 * (3 * (3 * (3 * 1))))\r\n    243\r\n    >>> make_repeater(square, 2)(5) # square(square(5))\r\n    625\r\n    >>> make_repeater(square, 3)(5) # square(square(square(5)))\r\n    390625\r\n    '''\r\n    '*** YOUR CODE HERE ***'\r\n\r\n\r\n```\r\n\r\nUse Ok to test your code:\r\n\r\n```\r\npython3 ok -q make_repeater\r\n\r\n```\r\n\r\n:bear:  \r\n\r\n```python\r\ndef make_repeater(f, n):\r\n    def helper(x):\r\n        i = n;\r\n        while i:\r\n            x = f(x)\r\n            i = i - 1;\r\n        return x\r\n    return helper\r\n```\r\n\r\n\r\n\r\n## Recursion\r\n\r\n### Q4: Digit Distance\r\n\r\nFor a given integer, the _digit distance_ is the sum of the absolute differences between consecutive digits. For example:\r\n\r\n*   The digit distance of `6` is `0`.\r\n*   The digit distance of `61` is `5`, as the absolute value of `6 - 1` is `5`.\r\n*   The digit distance of `71253` is `12` (`6 + 1 + 3 + 2`).\r\n\r\nWrite a function that determines the digit distance of a given positive integer. You must use recursion or the tests will fail.\r\n\r\n**Hint:** There are multiple valid ways of solving this problem! If you're stuck, try writing out an iterative solution first, and then convert your iterative solution into a recursive one.\r\n\r\n```\r\ndef digit_distance(n):\r\n    '''Determines the digit distance of n.\r\n\r\n    >>> digit_distance(3)\r\n    0\r\n    >>> digit_distance(777)\r\n    0\r\n    >>> digit_distance(314)\r\n    5\r\n    >>> digit_distance(31415926535)\r\n    32\r\n    >>> digit_distance(3464660003)\r\n    16\r\n    >>> from construct_check import check\r\n    >>> # ban all loops\r\n    >>> check(HW_SOURCE_FILE, 'digit_distance',\r\n    ...       ['For', 'While'])\r\n    True\r\n    '''\r\n    '*** YOUR CODE HERE ***'\r\n\r\n\r\n```\r\n\r\nUse Ok to test your code:\r\n\r\n```\r\npython3 ok -q digit_distance\r\n\r\n```\r\n\r\n:bear:\r\n\r\n```python\r\ndef digit_distance(n):\r\n    if n < 10:\r\n        return 0\r\n    else:\r\n        return abs(sub(n % 10, n // 10 % 10)) + digit_distance(n // 10)\r\n```\r\n\r\n\r\n\r\n### Q5: Interleaved Sum\r\n\r\nWrite a function `interleaved_sum`, which takes in a number `n` and two one-argument functions: `odd_func` and `even_func`. It applies `odd_func` to every odd number and `even_func` to every even number from 1 to `n` _inclusive_ and returns the sum.\r\n\r\nFor example, executing `interleaved_sum(5, lambda x: x, lambda x: x * x)` returns `1 + 2*2 + 3 + 4*4 + 5 = 29`.\r\n\r\n**Important:** Implement this function without using any loops or directly testing if a number is odd or even -- aka modulos (`%`) are not allowed! Instead of directly checking whether a number is even or odd, start with 1, which you know is an odd number.\r\n\r\n**Hint:** Introduce an inner helper function that takes an odd number `k` and computes an interleaved sum from `k` to `n` (including `n`).\r\n\r\n```\r\ndef interleaved_sum(n, odd_func, even_func):\r\n    '''Compute the sum odd_func(1) + even_func(2) + odd_func(3) + ..., up\r\n    to n.\r\n\r\n    >>> identity = lambda x: x\r\n    >>> square = lambda x: x * x\r\n    >>> triple = lambda x: x * 3\r\n    >>> interleaved_sum(5, identity, square) # 1   + 2*2 + 3   + 4*4 + 5\r\n    29\r\n    >>> interleaved_sum(5, square, identity) # 1*1 + 2   + 3*3 + 4   + 5*5\r\n    41\r\n    >>> interleaved_sum(4, triple, square)   # 1*3 + 2*2 + 3*3 + 4*4\r\n    32\r\n    >>> interleaved_sum(4, square, triple)   # 1*1 + 2*3 + 3*3 + 4*3\r\n    28\r\n    >>> from construct_check import check\r\n    >>> check(HW_SOURCE_FILE, 'interleaved_sum', ['While', 'For', 'Mod']) # ban loops and %\r\n    True\r\n    >>> check(HW_SOURCE_FILE, 'interleaved_sum', ['BitAnd', 'BitOr', 'BitXor']) # ban bitwise operators, don't worry about these if you don't know what they are\r\n    True\r\n    '''\r\n    '*** YOUR CODE HERE ***'\r\n\r\n\r\n```\r\n\r\nUse Ok to test your code:\r\n\r\n```\r\npython3 ok -q interleaved_sum\r\n\r\n```\r\n\r\n:bear:`interleaved_sum`\r\n\r\n```python\r\ndef interleaved_sum(n, odd_func, even_func):\r\n    if n == 0:\r\n        return 0\r\n    elif n % 2 == 1:\r\n        return odd_func(n) + interleaved_sum(n - 1, odd_func, even_func)\r\n    else:\r\n        return even_func(n) + interleaved_sum(n - 1, odd_func, even_func)\r\n\r\n```\r\n\r\n\r\n\r\n### Q6: Count Coins\r\n\r\nGiven a positive integer `total`, a set of coins makes change for `total` if the sum of the values of the coins is `total`. Here we will use standard US Coin values: 1, 5, 10, 25. For example, the following sets make change for `15`:\r\n\r\n*   15 1-cent coins\r\n*   10 1-cent, 1 5-cent coins\r\n*   5 1-cent, 2 5-cent coins\r\n*   5 1-cent, 1 10-cent coins\r\n*   3 5-cent coins\r\n*   1 5-cent, 1 10-cent coin\r\n\r\nThus, there are 6 ways to make change for `15`. Write a **recursive** function `count_coins` that takes a positive integer `total` and returns the number of ways to make change for `total` using coins.\r\n\r\nYou can use _either_ of the functions given to you:\r\n\r\n*   `next_larger_coin` will return the next larger coin denomination from the input, i.e. `next_larger_coin(5)` is `10`.\r\n*   `next_smaller_coin` will return the next smaller coin denomination from the input, i.e. `next_smaller_coin(5)` is `1`.\r\n*   Either function will return `None` if the next coin value does not exist\r\n\r\nThere are two main ways in which you can approach this problem. One way uses `next_larger_coin`, and another uses `next_smaller_coin`. It is up to you which one you want to use!\r\n\r\n**Important:** Use recursion; the tests will fail if you use loops.\r\n\r\n**Hint:** Refer to the [implementation](https://www.composingprograms.com/pages/17-recursive-functions.html#example-partitions) of `count_partitions` for an example of how to count the ways to sum up to a final value with smaller parts. If you need to keep track of more than one value across recursive calls, consider writing a helper function.\r\n\r\n```\r\ndef next_larger_coin(coin):\r\n    '''Returns the next larger coin in order.\r\n    >>> next_larger_coin(1)\r\n    5\r\n    >>> next_larger_coin(5)\r\n    10\r\n    >>> next_larger_coin(10)\r\n    25\r\n    >>> next_larger_coin(2) # Other values return None\r\n    '''\r\n    if coin == 1:\r\n        return 5\r\n    elif coin == 5:\r\n        return 10\r\n    elif coin == 10:\r\n        return 25\r\n\r\ndef next_smaller_coin(coin):\r\n    '''Returns the next smaller coin in order.\r\n    >>> next_smaller_coin(25)\r\n    10\r\n    >>> next_smaller_coin(10)\r\n    5\r\n    >>> next_smaller_coin(5)\r\n    1\r\n    >>> next_smaller_coin(2) # Other values return None\r\n    '''\r\n    if coin == 25:\r\n        return 10\r\n    elif coin == 10:\r\n        return 5\r\n    elif coin == 5:\r\n        return 1\r\n\r\ndef count_coins(total):\r\n    '''Return the number of ways to make change using coins of value of 1, 5, 10, 25.\r\n    >>> count_coins(15)\r\n    6\r\n    >>> count_coins(10)\r\n    4\r\n    >>> count_coins(20)\r\n    9\r\n    >>> count_coins(100) # How many ways to make change for a dollar?\r\n    242\r\n    >>> count_coins(200)\r\n    1463\r\n    >>> from construct_check import check\r\n    >>> # ban iteration\r\n    >>> check(HW_SOURCE_FILE, 'count_coins', ['While', 'For'])\r\n    True\r\n    '''\r\n    '*** YOUR CODE HERE ***'\r\n\r\n\r\n```\r\n\r\n```\r\npython3 ok -q count_coins\r\n```\r\n\r\n:bear:\r\n\r\n```python\r\n# \u8fb9\u754c\u60c5\u51b5\uff1a \u786c\u5e01\u4e3a0\uff0c\u65b9\u6848\u6b63\u786e\u3002", "top": 0, "createdAt": 1721216324, "style": "", "script": "", "head": "", "ogImage": "https://img.icons8.com/doodle/480/mugman.png", "createdDate": "2024-07-17", "dateLabelColor": "#bc4c00"}, "P4": {"htmlDir": "docs/post/cmu15213-fa15-lec25.html", "labels": ["csapp", "cmu15-213", "lecture"], "postTitle": "cmu15213-fa15-lec25", "postUrl": "post/cmu15213-fa15-lec25.html", "postSourceUrl": "https://github.com/LianSeKong/lizi/issues/4", "commentNum": 0, "wordCount": 7895, "description": "\r\n# \u9ad8\u7ea7\r\n\r\n\r\n> \u4f7f\u7528\u4fe1\u53f7\u91cf\u534f\u8c03\u5bf9\u5171\u4eab\u8d44\u6e90\u7684\u8bbf\u95ee\r\n> \u4f7f\u7528\u540c\u6b65\u53ef\u80fd\u4f1a\u8ba9\u4ee3\u7801\u6267\u884c\u53d8\u6162\r\n\r\n\u57fa\u672c\u601d\u60f3\uff1a\u7ebf\u7a0b\u4f7f\u7528\u4fe1\u53f7\u91cf\u64cd\u4f5c\u6765\u901a\u77e5\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u67d0\u4e2a\u6761\u4ef6\u5df2\u53d8\u4e3a\u771f\r\n1. \u4f7f\u7528\u8ba1\u6570\u4fe1\u53f7\u91cf\u6765\u8ddf\u8e2a\u8d44\u6e90\u72b6\u6001\u5e76\u901a\u77e5\u5176\u4ed6\u7ebf\u7a0b\r\n2. \u4f7f\u7528\u4e92\u65a5\u9501\u6765\u4fdd\u62a4\u5bf9\u8d44\u6e90\u7684\u8bbf\u95ee\r\n\r\n\u4e24\u79cd\u5178\u578b\u4f8b\u5b50\uff1a \r\n1. \u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u95ee\u9898\r\n2. \u8bfb\u8005-\u5199\u8005\u95ee\u9898\r\n\r\n### \u751f\u4ea7\u8005-\u6d88\u8d39\u8005\r\n\r\n\u5e38\u89c1\u7684\u540c\u6b65\u6a21\u5f0f\uff1a\r\n1. \u751f\u4ea7\u8005\u7b49\u5f85\u7a7a\u4f4d\uff0c\u5c06\u9879\u76ee\u63d2\u5165\u7f13\u51b2\u533a\uff0c\u5e76\u901a\u77e5\u6d88\u8d39\u8005\u3002", "top": 0, "createdAt": 1721272770, "style": "", "script": "", "head": "", "ogImage": "https://img.icons8.com/doodle/480/mugman.png", "createdDate": "2024-07-18", "dateLabelColor": "#bc4c00"}, "P5": {"htmlDir": "docs/post/cmu15213-fa15-hw12.html", "labels": ["csapp", "cmu15-213", "hw"], "postTitle": "cmu15213-fa15-hw12", "postUrl": "post/cmu15213-fa15-hw12.html", "postSourceUrl": "https://github.com/LianSeKong/lizi/issues/5", "commentNum": 0, "wordCount": 2714, "description": "# HW12\r\n\r\n## 12.16\r\n\r\n```c\r\nvoid* thread(void * vargp) {\r\n    printf('12.16 homework threadId:  %ld!\\n', pthread_self());\r\n    return NULL;\r\n}\r\n\r\nint main(int argc, char **argv) {\r\n    if (argc != 2) {\r\n        fprintf(stderr, 'usage: %s <n>\\n', argv[0]);\r\n        exit(0);\r\n    }\r\n    int n = atoi(argv[1]);\r\n    pthread_t tid[n];\r\n    for (size_t i = 0; i < n; i++) {\r\n        pthread_create(&tid[i], NULL, thread, NULL);\r\n    }\r\n    for (size_t i = 0; i < n; i++) {\r\n        pthread_join(tid[i], NULL); // \u7b49\u5f85\u7ebf\u7a0b\u7ed3\u675f\r\n    }\r\n    exit(0);\r\n}\r\n```\r\n\r\n## 12.17\r\n\r\n```c\r\n\r\nvoid* thread(void * vargp) {\r\n    sleep(1);\r\n    printf('Hello, world!\\n');\r\n    return NULL;\r\n}\r\n\r\nint main(int argc, char **argv) {\r\n    pthread_t tid;\r\n    pthread_create(&tid, NULL, thread, NULL);\r\n    pthread_join(tid, NULL);\r\n    exit(0);\r\n}\r\n\r\n```\r\n\r\n## 12.35\r\n\r\n\r\n\r\n```c\r\nstatic int cnt = 0;\r\n\r\nvoid signchld_handler(int sig) {\r\n    // WNOHANG: \u5982\u679c\u7b49\u5f85\u96c6\u4e2d\u7684\u5b50\u8fdb\u7a0b\u5747\u672a\u7ec8\u6b62\uff0c\u5219\u7acb\u5373\u8fd4\u56de\uff08\u8fd4\u56de\u503c\u4e3a 0\uff09\u3002", "top": 0, "createdAt": 1721383737, "style": "", "script": "", "head": "", "ogImage": "https://img.icons8.com/doodle/480/mugman.png", "createdDate": "2024-07-19", "dateLabelColor": "#bc4c00"}, "P6": {"htmlDir": "docs/post/ubuntu-shang-an-zhuang-mysql.html", "labels": ["database", "mysql"], "postTitle": "ubuntu\u4e0a\u5b89\u88c5mysql", "postUrl": "post/ubuntu-shang-an-zhuang-mysql.html", "postSourceUrl": "https://github.com/LianSeKong/lizi/issues/6", "commentNum": 0, "wordCount": 740, "description": "# Ubuntu Install Mysql\r\n\r\n1. \u66f4\u65b0\u8f6f\u4ef6\u5305\r\n\r\n   ```shell\r\n   sudo apt install update\r\n   ```\r\n\r\n2. \u5b89\u88c5mysql\u670d\u52a1\u5668\r\n\r\n   ```shell\r\n   sudo apt install mysql-server\r\n   ```\r\n\r\n3. \u542f\u52a8\u670d\u52a1\r\n\r\n   ```shell\r\n   sudo systemctl start mysql\r\n   ```\r\n\r\n4. \u5f00\u673a\u81ea\u542f\u52a8\r\n\r\n   ```shell\r\n   sudo systemctl enable mysql\r\n   ```\r\n\r\n5. \u4fee\u6539\u5bc6\u7801\r\n\r\n   ```shell\r\n   # \u767b\u5f55, \u56e0\u4e3a\u6ca1\u6709\u8bbe\u7f6e\u5bc6\u7801\uff0c\u7ba1\u7406\u5458\u4e0b\u76f4\u63a5\u4ee5root\u7528\u6237\u767b\u5f55\r\n   sudo mysql\r\n   \r\n   ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password';\r\n   flush privileges;\r\n   # \r\n   \r\n   ```\r\n\r\n6. \u521b\u5efa\u65b0\u7528\u6237\r\n\r\n   ```sql\r\n    // % \u4ee3\u8868\u6240\u6709\u5730\u5740\u90fd\u53ef\u901a\u8fc7\u6b64\u7528\u6237\u767b\u5f55\r\n   CREATE USER 'lpf'@'%' IDENTIFIED BY '123';\r\n   \r\n   ```\r\n7. \u591f\u4fa6\u542c\u8fdc\u7a0b\u53ef\u8bbf\u95ee\u7684\u63a5\u53e3 \r\n\r\n\t``` shell\r\n\tsudo nvim /etc/mysql/mysql.conf.d/mysqld.cnf\r\n\t\r\n\t```\r\n\t`bind-address = 0.0.0.0`\r\n\r\n\t\r\n   \r\n\r\n\u3002", "top": 0, "createdAt": 1721460513, "style": "", "script": "", "head": "", "ogImage": "https://img.icons8.com/doodle/480/mugman.png", "createdDate": "2024-07-20", "dateLabelColor": "#bc4c00"}}, "singeListJson": {}, "labelColorDict": {"cmu15-213": "#C0858E", "cs61a": "#1D3AD1", "csapp": "#1d76db", "hw": "#B60205", "lab": "#FBCA04", "lecture": "#D33B1C", "project": "#d876e3"}, "displayTitle": "Lizi", "faviconUrl": "https://img.icons8.com/doodle/480/mugman.png", "ogImage": "https://img.icons8.com/doodle/480/mugman.png", "primerCSS": "<link href='https://mirrors.sustech.edu.cn/cdnjs/ajax/libs/Primer/21.0.7/primer.css' rel='stylesheet' />", "homeUrl": "https://LianSeKong.github.io/lizi", "prevUrl": "disabled", "nextUrl": "disabled"}